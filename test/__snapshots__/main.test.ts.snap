// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
Object {
  "Conditions": Object {
    "AuthAutoScalingEnabled0CD7354E": Object {
      "Fn::And": Array [
        Object {
          "Condition": "AuthServiceEnabled3234D87F",
        },
        Object {
          "Condition": "HighAvailability",
        },
      ],
    },
    "AuthProvider1Enabled983DA6B5": Object {
      "Fn::Not": Array [
        Object {
          "Fn::Equals": Array [
            Object {
              "Ref": "AuthProvider1Name740DD3F6",
            },
            "",
          ],
        },
      ],
    },
    "AuthProvider2Enabled05B8862B": Object {
      "Fn::Not": Array [
        Object {
          "Fn::Equals": Array [
            Object {
              "Ref": "AuthProvider2Name573986E5",
            },
            "",
          ],
        },
      ],
    },
    "AuthProvider3Enabled464D1673": Object {
      "Fn::Not": Array [
        Object {
          "Fn::Equals": Array [
            Object {
              "Ref": "AuthProvider3NameA8A7785F",
            },
            "",
          ],
        },
      ],
    },
    "AuthServiceEnabled3234D87F": Object {
      "Fn::Not": Array [
        Object {
          "Fn::Equals": Array [
            Object {
              "Ref": "AuthTaskSize9895C206",
            },
            "none",
          ],
        },
      ],
    },
    "CdnWafDisabledF333CA7D": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "WebAclArn",
        },
        "",
      ],
    },
    "HighAvailability": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "EnableHighAvailability",
        },
        "true",
      ],
    },
    "ImgproxyAutoScalingEnabled44E9E87F": Object {
      "Fn::And": Array [
        Object {
          "Condition": "ImgproxyServiceEnabled64E773FC",
        },
        Object {
          "Condition": "HighAvailability",
        },
      ],
    },
    "ImgproxyServiceEnabled64E773FC": Object {
      "Fn::Not": Array [
        Object {
          "Fn::Equals": Array [
            Object {
              "Ref": "ImgproxyTaskSize5D0DD9F6",
            },
            "none",
          ],
        },
      ],
    },
    "KongAutoScalingEnabled41DC2F80": Object {
      "Fn::And": Array [
        Object {
          "Condition": "KongServiceEnabled5CB62A18",
        },
        Object {
          "Condition": "HighAvailability",
        },
      ],
    },
    "KongServiceEnabled5CB62A18": Object {
      "Fn::Not": Array [
        Object {
          "Fn::Equals": Array [
            Object {
              "Ref": "KongTaskSize93C195E9",
            },
            "none",
          ],
        },
      ],
    },
    "MetaAutoScalingEnabledCF28EDB1": Object {
      "Fn::And": Array [
        Object {
          "Condition": "MetaServiceEnabled094DCF06",
        },
        Object {
          "Condition": "HighAvailability",
        },
      ],
    },
    "MetaServiceEnabled094DCF06": Object {
      "Fn::Not": Array [
        Object {
          "Fn::Equals": Array [
            Object {
              "Ref": "MetaTaskSize556D36D9",
            },
            "none",
          ],
        },
      ],
    },
    "RealtimeAutoScalingEnabled7991ED3B": Object {
      "Fn::And": Array [
        Object {
          "Condition": "RealtimeServiceEnabled18ED891C",
        },
        Object {
          "Condition": "HighAvailability",
        },
      ],
    },
    "RealtimeServiceEnabled18ED891C": Object {
      "Fn::Not": Array [
        Object {
          "Fn::Equals": Array [
            Object {
              "Ref": "RealtimeTaskSize6077FE1F",
            },
            "none",
          ],
        },
      ],
    },
    "RestAutoScalingEnabled69452861": Object {
      "Fn::And": Array [
        Object {
          "Condition": "RestServiceEnabledD6F99FCE",
        },
        Object {
          "Condition": "HighAvailability",
        },
      ],
    },
    "RestServiceEnabledD6F99FCE": Object {
      "Fn::Not": Array [
        Object {
          "Fn::Equals": Array [
            Object {
              "Ref": "RestTaskSize14E11A14",
            },
            "none",
          ],
        },
      ],
    },
    "StorageAutoScalingEnabled4D34646B": Object {
      "Fn::And": Array [
        Object {
          "Condition": "StorageServiceEnabled58819374",
        },
        Object {
          "Condition": "HighAvailability",
        },
      ],
    },
    "StorageServiceEnabled58819374": Object {
      "Fn::Not": Array [
        Object {
          "Fn::Equals": Array [
            Object {
              "Ref": "StorageTaskSizeB82D9CFB",
            },
            "none",
          ],
        },
      ],
    },
    "WorkMailEnabled": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "EnableWorkMail",
        },
        "true",
      ],
    },
  },
  "Description": "Self-hosted Supabase",
  "Mappings": Object {
    "ServiceprincipalMap": Object {
      "af-south-1": Object {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": Object {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": Object {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": Object {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": Object {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": Object {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-south-2": Object {
        "states": "states.ap-south-2.amazonaws.com",
      },
      "ap-southeast-1": Object {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": Object {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": Object {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ap-southeast-4": Object {
        "states": "states.ap-southeast-4.amazonaws.com",
      },
      "ca-central-1": Object {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": Object {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": Object {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": Object {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-central-2": Object {
        "states": "states.eu-central-2.amazonaws.com",
      },
      "eu-north-1": Object {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": Object {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": Object {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": Object {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": Object {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": Object {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "il-central-1": Object {
        "states": "states.il-central-1.amazonaws.com",
      },
      "me-central-1": Object {
        "states": "states.me-central-1.amazonaws.com",
      },
      "me-south-1": Object {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": Object {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": Object {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": Object {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": Object {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": Object {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-west-1": Object {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": Object {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
    "TaskSize": Object {
      "2xlarge": Object {
        "cpu": 8192,
        "memory": 16384,
      },
      "4xlarge": Object {
        "cpu": 16384,
        "memory": 32768,
      },
      "large": Object {
        "cpu": 2048,
        "memory": 4096,
      },
      "medium": Object {
        "cpu": 1024,
        "memory": 2048,
      },
      "micro": Object {
        "cpu": 256,
        "memory": 512,
      },
      "none": Object {
        "cpu": 256,
        "memory": 512,
      },
      "small": Object {
        "cpu": 512,
        "memory": 1024,
      },
      "xlarge": Object {
        "cpu": 4096,
        "memory": 8192,
      },
    },
  },
  "Metadata": Object {
    "AWS::CloudFormation::Interface": Object {
      "ParameterGroups": Array [
        Object {
          "Label": Object {
            "default": "Supabase - Auth Settings",
          },
          "Parameters": Array [
            "DisableSignup",
            "SiteUrl",
            "RedirectUrls",
            "JwtExpiryLimit",
            "PasswordMinLength",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - SMTP Settings",
          },
          "Parameters": Array [
            "Email",
            "SenderName",
            "SesRegion",
            "EnableWorkMail",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - Versions (Container Images)",
          },
          "Parameters": Array [
            "AuthImageUri",
            "RestImageUri",
            "RealtimeImageUri",
            "StorageImageUri",
            "ImgproxyImageUri",
            "PostgresMetaImageUri",
            "StudioBranch",
          ],
        },
        Object {
          "Label": Object {
            "default": "Infrastructure Settings",
          },
          "Parameters": Array [
            "EnableHighAvailability",
            "WebAclArn",
          ],
        },
        Object {
          "Label": Object {
            "default": "Infrastructure Settings - Database",
          },
          "Parameters": Array [
            "MinACU",
            "MaxACU",
          ],
        },
        Object {
          "Label": Object {
            "default": "Infrastructure Settings - Containers",
          },
          "Parameters": Array [
            "KongTaskSize93C195E9",
            "AuthTaskSize9895C206",
            "RestTaskSize14E11A14",
            "RealtimeTaskSize6077FE1F",
            "StorageTaskSizeB82D9CFB",
            "ImgproxyTaskSize5D0DD9F6",
            "MetaTaskSize556D36D9",
          ],
        },
        Object {
          "Label": Object {
            "default": "External Auth Provider 1",
          },
          "Parameters": Array [
            "AuthProvider1Name740DD3F6",
            "AuthProvider1ClientId5614D178",
            "AuthProvider1SecretAE54364F",
          ],
        },
        Object {
          "Label": Object {
            "default": "External Auth Provider 2",
          },
          "Parameters": Array [
            "AuthProvider2Name573986E5",
            "AuthProvider2ClientIdF3685A2B",
            "AuthProvider2Secret2662F55E",
          ],
        },
        Object {
          "Label": Object {
            "default": "External Auth Provider 3",
          },
          "Parameters": Array [
            "AuthProvider3NameA8A7785F",
            "AuthProvider3ClientId8DF3C6F7",
            "AuthProvider3Secret29364F33",
          ],
        },
      ],
      "ParameterLabels": Object {
        "AuthImageUri": Object {
          "default": "Image URI - GoTrue",
        },
        "AuthProvider1ClientId5614D178": Object {
          "default": "Client ID",
        },
        "AuthProvider1Name740DD3F6": Object {
          "default": "Provider Name",
        },
        "AuthProvider1SecretAE54364F": Object {
          "default": "Client Secret",
        },
        "AuthProvider2ClientIdF3685A2B": Object {
          "default": "Client ID",
        },
        "AuthProvider2Name573986E5": Object {
          "default": "Provider Name",
        },
        "AuthProvider2Secret2662F55E": Object {
          "default": "Client Secret",
        },
        "AuthProvider3ClientId8DF3C6F7": Object {
          "default": "Client ID",
        },
        "AuthProvider3NameA8A7785F": Object {
          "default": "Provider Name",
        },
        "AuthProvider3Secret29364F33": Object {
          "default": "Client Secret",
        },
        "AuthTaskSize9895C206": Object {
          "default": "Task Size - GoTrue",
        },
        "DisableSignup": Object {
          "default": "Disable User Signups",
        },
        "Email": Object {
          "default": "Sender Email Address",
        },
        "EnableHighAvailability": Object {
          "default": "High Availability (HA)",
        },
        "EnableWorkMail": Object {
          "default": "Enable Test E-mail Domain (via Amazon WorkMail)",
        },
        "ImgproxyImageUri": Object {
          "default": "Image URI - imgproxy",
        },
        "ImgproxyTaskSize5D0DD9F6": Object {
          "default": "Task Size - imgproxy",
        },
        "JwtExpiryLimit": Object {
          "default": "JWT expiry limit",
        },
        "KongTaskSize93C195E9": Object {
          "default": "Task Size - Kong",
        },
        "MaxACU": Object {
          "default": "Maximum ACUs",
        },
        "MetaTaskSize556D36D9": Object {
          "default": "Task Size - postgres-meta",
        },
        "MinACU": Object {
          "default": "Minimum ACUs",
        },
        "PasswordMinLength": Object {
          "default": "Min password length",
        },
        "PostgresMetaImageUri": Object {
          "default": "Image URI - postgres-meta",
        },
        "RealtimeImageUri": Object {
          "default": "Image URI - Realtime",
        },
        "RealtimeTaskSize6077FE1F": Object {
          "default": "Task Size - Realtime",
        },
        "RedirectUrls": Object {
          "default": "Redirect URLs",
        },
        "RestImageUri": Object {
          "default": "Image URI - PostgREST",
        },
        "RestTaskSize14E11A14": Object {
          "default": "Task Size - PostgREST",
        },
        "SenderName": Object {
          "default": "Sender Name",
        },
        "SesRegion": Object {
          "default": "Amazon SES Region",
        },
        "SiteUrl": Object {
          "default": "Site URL",
        },
        "StorageImageUri": Object {
          "default": "Image URI - Storage",
        },
        "StorageTaskSizeB82D9CFB": Object {
          "default": "Task Size - Storage",
        },
        "StudioBranch": Object {
          "default": "Supabase Studio Branch",
        },
        "WebAclArn": Object {
          "default": "Web ACL ARN (AWS WAF)",
        },
      },
    },
  },
  "Outputs": Object {
    "StudioUrl": Object {
      "Description": "The dashboard for Supabase projects.",
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Fn::GetAtt": Array [
                "StudioAppProdBranchED7568CB",
                "BranchName",
              ],
            },
            ".",
            Object {
              "Fn::GetAtt": Array [
                "StudioAppE10A3450",
                "DefaultDomain",
              ],
            },
          ],
        ],
      },
    },
    "SupabasAnonKey": Object {
      "Description": "This key is safe to use in a browser if you have enabled Row Level Security for your tables and configured policies.",
      "Export": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "AnonKey",
            ],
          ],
        },
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "JwtSecretAnonKey63F37A1E",
          "Value",
        ],
      },
    },
    "SupabaseUrl": Object {
      "Description": "A RESTful endpoint for querying and managing your database.",
      "Export": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "Url",
            ],
          ],
        },
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Fn::GetAtt": Array [
                "CdnDistribution149FA6C8",
                "DomainName",
              ],
            },
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "AuthImageUri": Object {
      "Default": "public.ecr.aws/supabase/gotrue:v2.110.0",
      "Description": "https://gallery.ecr.aws/supabase/gotrue",
      "Type": "String",
    },
    "AuthProvider1ClientId5614D178": Object {
      "Default": "",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "AuthProvider1Name740DD3F6": Object {
      "AllowedValues": Array [
        "",
        "APPLE",
        "AZURE",
        "BITBUCKET",
        "DISCORD",
        "FACEBOOK",
        "GITHUB",
        "GITLAB",
        "GOOGLE",
        "KEYCLOAK",
        "LINKEDIN",
        "NOTION",
        "SPOTIFY",
        "SLACK",
        "TWITCH",
        "TWITTER",
        "WORKOS",
      ],
      "Default": "",
      "Description": "External Auth Provider Name",
      "Type": "String",
    },
    "AuthProvider1SecretAE54364F": Object {
      "Default": "",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
    "AuthProvider2ClientIdF3685A2B": Object {
      "Default": "",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "AuthProvider2Name573986E5": Object {
      "AllowedValues": Array [
        "",
        "APPLE",
        "AZURE",
        "BITBUCKET",
        "DISCORD",
        "FACEBOOK",
        "GITHUB",
        "GITLAB",
        "GOOGLE",
        "KEYCLOAK",
        "LINKEDIN",
        "NOTION",
        "SPOTIFY",
        "SLACK",
        "TWITCH",
        "TWITTER",
        "WORKOS",
      ],
      "Default": "",
      "Description": "External Auth Provider Name",
      "Type": "String",
    },
    "AuthProvider2Secret2662F55E": Object {
      "Default": "",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
    "AuthProvider3ClientId8DF3C6F7": Object {
      "Default": "",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "AuthProvider3NameA8A7785F": Object {
      "AllowedValues": Array [
        "",
        "APPLE",
        "AZURE",
        "BITBUCKET",
        "DISCORD",
        "FACEBOOK",
        "GITHUB",
        "GITLAB",
        "GOOGLE",
        "KEYCLOAK",
        "LINKEDIN",
        "NOTION",
        "SPOTIFY",
        "SLACK",
        "TWITCH",
        "TWITTER",
        "WORKOS",
      ],
      "Default": "",
      "Description": "External Auth Provider Name",
      "Type": "String",
    },
    "AuthProvider3Secret29364F33": Object {
      "Default": "",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
    "AuthTaskSize9895C206": Object {
      "AllowedValues": Array [
        "none",
        "micro",
        "small",
        "medium",
        "large",
        "xlarge",
        "2xlarge",
        "4xlarge",
      ],
      "Default": "medium",
      "Description": "Fargare task size",
      "Type": "String",
    },
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "DisableSignup": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "When signup is disabled the only way to create new users is through invites. Defaults to false, all signups enabled.",
      "Type": "String",
    },
    "Email": Object {
      "AllowedPattern": "^[\\\\x20-\\\\x45]?[\\\\w-\\\\+]+(\\\\.[\\\\w]+)*@[\\\\w-]+(\\\\.[\\\\w]+)*(\\\\.[a-z]{2,})$",
      "ConstraintDescription": "must be a valid email address",
      "Default": "noreply@example.com",
      "Description": "This is the email address the emails are sent from. If Amazon WorkMail is enabled, it set \\"noreply@supabase-<account_id>.awsapps.com\\"",
      "Type": "String",
    },
    "EnableHighAvailability": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Enable auto-scaling and clustering (Multi-AZ).",
      "Type": "String",
    },
    "EnableWorkMail": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Enable test e-mail domain \\"xxx.awsapps.com\\" with Amazon WorkMail.",
      "Type": "String",
    },
    "ImgproxyImageUri": Object {
      "Default": "public.ecr.aws/supabase/imgproxy:v1.2.0",
      "Description": "https://gallery.ecr.aws/supabase/imgproxy",
      "Type": "String",
    },
    "ImgproxyTaskSize5D0DD9F6": Object {
      "AllowedValues": Array [
        "none",
        "micro",
        "small",
        "medium",
        "large",
        "xlarge",
        "2xlarge",
        "4xlarge",
      ],
      "Default": "medium",
      "Description": "Fargare task size",
      "Type": "String",
    },
    "JwtExpiryLimit": Object {
      "Default": 3600,
      "Description": "How long tokens are valid for. Defaults to 3600 (1 hour), maximum 604,800 seconds (one week).",
      "MaxValue": 604800,
      "MinValue": 300,
      "Type": "Number",
    },
    "KongTaskSize93C195E9": Object {
      "AllowedValues": Array [
        "none",
        "micro",
        "small",
        "medium",
        "large",
        "xlarge",
        "2xlarge",
        "4xlarge",
      ],
      "Default": "medium",
      "Description": "Fargare task size",
      "Type": "String",
    },
    "MaxACU": Object {
      "Default": 32,
      "Description": "The maximum number of Aurora capacity units (ACU) for a DB instance in an Aurora Serverless v2 cluster.",
      "MaxValue": 128,
      "MinValue": 0.5,
      "Type": "Number",
    },
    "MetaTaskSize556D36D9": Object {
      "AllowedValues": Array [
        "none",
        "micro",
        "small",
        "medium",
        "large",
        "xlarge",
        "2xlarge",
        "4xlarge",
      ],
      "Default": "medium",
      "Description": "Fargare task size",
      "Type": "String",
    },
    "MinACU": Object {
      "Default": 0.5,
      "Description": "The minimum number of Aurora capacity units (ACU) for a DB instance in an Aurora Serverless v2 cluster.",
      "MaxValue": 128,
      "MinValue": 0.5,
      "Type": "Number",
    },
    "PasswordMinLength": Object {
      "Default": "8",
      "Description": "When signup is disabled the only way to create new users is through invites. Defaults to false, all signups enabled.",
      "MaxValue": 128,
      "MinValue": 8,
      "Type": "Number",
    },
    "PostgresMetaImageUri": Object {
      "Default": "public.ecr.aws/supabase/postgres-meta:v0.74.2",
      "Description": "https://gallery.ecr.aws/supabase/postgres-meta",
      "Type": "String",
    },
    "RealtimeImageUri": Object {
      "Default": "public.ecr.aws/supabase/realtime:v2.25.27",
      "Description": "https://gallery.ecr.aws/supabase/realtime",
      "Type": "String",
    },
    "RealtimeTaskSize6077FE1F": Object {
      "AllowedValues": Array [
        "none",
        "micro",
        "small",
        "medium",
        "large",
        "xlarge",
        "2xlarge",
        "4xlarge",
      ],
      "Default": "medium",
      "Description": "Fargare task size",
      "Type": "String",
    },
    "RedirectUrls": Object {
      "Default": "",
      "Description": "URLs that auth providers are permitted to redirect to post authentication",
      "Type": "String",
    },
    "RestImageUri": Object {
      "Default": "public.ecr.aws/supabase/postgrest:v11.2.0",
      "Description": "https://gallery.ecr.aws/supabase/postgrest",
      "Type": "String",
    },
    "RestTaskSize14E11A14": Object {
      "AllowedValues": Array [
        "none",
        "micro",
        "small",
        "medium",
        "large",
        "xlarge",
        "2xlarge",
        "4xlarge",
      ],
      "Default": "medium",
      "Description": "Fargare task size",
      "Type": "String",
    },
    "SenderName": Object {
      "Default": "Supabase",
      "Description": "The From email sender name for all emails sent.",
      "Type": "String",
    },
    "SesRegion": Object {
      "AllowedValues": Array [
        "us-east-1",
        "us-east-2",
        "us-west-1",
        "us-west-2",
        "ap-south-1",
        "ap-northeast-1",
        "ap-northeast-2",
        "ap-northeast-3",
        "ap-southeast-1",
        "ap-southeast-2",
        "ca-central-1",
        "eu-central-1",
        "eu-west-1",
        "eu-west-2",
        "eu-west-3",
        "eu-north-1",
        "sa-east-1",
      ],
      "Default": "us-west-2",
      "Description": "Amazon SES used for SMTP server. If you want to use Amazon WorkMail, need to set us-east-1, us-west-2 or eu-west-1.",
      "Type": "String",
    },
    "SiteUrl": Object {
      "Default": "http://localhost:3000",
      "Description": "The base URL your site is located at. Currently used in combination with other settings to construct URLs used in emails.",
      "Type": "String",
    },
    "StorageImageUri": Object {
      "Default": "public.ecr.aws/supabase/storage-api:v0.43.11",
      "Description": "https://gallery.ecr.aws/supabase/storage-api",
      "Type": "String",
    },
    "StorageTaskSizeB82D9CFB": Object {
      "AllowedValues": Array [
        "none",
        "micro",
        "small",
        "medium",
        "large",
        "xlarge",
        "2xlarge",
        "4xlarge",
      ],
      "Default": "medium",
      "Description": "Fargare task size",
      "Type": "String",
    },
    "StudioBranch": Object {
      "Default": "v0.23.09",
      "Description": "Branch or tag - https://github.com/supabase/supabase/tags",
      "Type": "String",
    },
    "WebAclArn": Object {
      "AllowedPattern": "^arn:aws:wafv2:us-east-1:[0-9]{12}:global/webacl/[\\\\w-]+/[\\\\w]{8}-[\\\\w]{4}-[\\\\w]{4}-[\\\\w]{4}-[\\\\w]{12}$|",
      "Default": "",
      "Description": "Web ACL for CloudFront.",
      "Type": "String",
    },
  },
  "Resources": Object {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": Object {
      "DependsOn": Array [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "17c16a3854838fd3ff4bda08146122a6701f33b9c86ae17f415ad0dc47a97544.zip",
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthLogs940C0551": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "AuthParameterChanged2FC322F1": Object {
      "Properties": Object {
        "Description": "Supabase - Auth parameter changed",
        "EventPattern": Object {
          "detail": Object {
            "name": Array [
              Object {
                "prefix": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "/",
                      Object {
                        "Ref": "AWS::StackName",
                      },
                      "/Auth/",
                    ],
                  ],
                },
              },
            ],
            "operation": Array [
              "Update",
            ],
          },
          "detail-type": Array [
            "Parameter Store Change",
          ],
          "source": Array [
            "aws.ssm",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Ref": "ForceDeployJobStateMachine528644B1",
            },
            "Id": "Target0",
            "Input": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "{\\"services\\":[\\"",
                  Object {
                    "Ref": "AuthServiceBA690728",
                  },
                  "\\"]}",
                ],
              ],
            },
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "ForceDeployJobStateMachineEventsRole3137AB10",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "AuthProvider1ClientIdParameterA8CDD11D": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/",
              Object {
                "Fn::If": Array [
                  "AuthProvider1Enabled983DA6B5",
                  Object {
                    "Ref": "AuthProvider1Name740DD3F6",
                  },
                  "Provider1",
                ],
              },
              "/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::If": Array [
            "AuthProvider1Enabled983DA6B5",
            Object {
              "Ref": "AuthProvider1ClientId5614D178",
            },
            "null",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "AuthProvider1SecretParameter32101B7A": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/",
              Object {
                "Fn::If": Array [
                  "AuthProvider1Enabled983DA6B5",
                  Object {
                    "Ref": "AuthProvider1Name740DD3F6",
                  },
                  "Provider1",
                ],
              },
              "/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::If": Array [
            "AuthProvider1Enabled983DA6B5",
            Object {
              "Ref": "AuthProvider1SecretAE54364F",
            },
            "null",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "AuthProvider2ClientIdParameter30D2A6D6": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/",
              Object {
                "Fn::If": Array [
                  "AuthProvider2Enabled05B8862B",
                  Object {
                    "Ref": "AuthProvider2Name573986E5",
                  },
                  "Provider2",
                ],
              },
              "/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::If": Array [
            "AuthProvider2Enabled05B8862B",
            Object {
              "Ref": "AuthProvider2ClientIdF3685A2B",
            },
            "null",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "AuthProvider2SecretParameter4B28A4BE": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/",
              Object {
                "Fn::If": Array [
                  "AuthProvider2Enabled05B8862B",
                  Object {
                    "Ref": "AuthProvider2Name573986E5",
                  },
                  "Provider2",
                ],
              },
              "/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::If": Array [
            "AuthProvider2Enabled05B8862B",
            Object {
              "Ref": "AuthProvider2Secret2662F55E",
            },
            "null",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "AuthProvider3ClientIdParameter6DA38073": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/",
              Object {
                "Fn::If": Array [
                  "AuthProvider3Enabled464D1673",
                  Object {
                    "Ref": "AuthProvider3NameA8A7785F",
                  },
                  "Provider3",
                ],
              },
              "/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::If": Array [
            "AuthProvider3Enabled464D1673",
            Object {
              "Ref": "AuthProvider3ClientId8DF3C6F7",
            },
            "null",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "AuthProvider3SecretParameter7A77F7F4": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/",
              Object {
                "Fn::If": Array [
                  "AuthProvider3Enabled464D1673",
                  Object {
                    "Ref": "AuthProvider3NameA8A7785F",
                  },
                  "Provider3",
                ],
              },
              "/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::If": Array [
            "AuthProvider3Enabled464D1673",
            Object {
              "Ref": "AuthProvider3Secret29364F33",
            },
            "null",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "AuthServiceBA690728": Object {
      "DependsOn": Array [
        "AuthTaskDefTaskRole8CE224AF",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "Alarms": Object {
            "AlarmNames": Array [],
            "Enable": false,
            "Rollback": false,
          },
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "DesiredCount": Object {
          "Fn::If": Array [
            "AuthServiceEnabled3234D87F",
            Object {
              "Ref": "AWS::NoValue",
            },
            0,
          ],
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "AuthServiceSecurityGroup6440464F",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 9999,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "AuthServiceCloudmapService57D92A65",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "AuthTaskDef5FB652ED",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "AuthServiceCloudmapService57D92A65": Object {
      "DependsOn": Array [
        "AuthTaskDefTaskRole8CE224AF",
      ],
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "auth",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "AuthServiceSecurityGroup6440464F": Object {
      "DependsOn": Array [
        "AuthTaskDefTaskRole8CE224AF",
      ],
      "Properties": Object {
        "GroupDescription": "Supabase/Auth/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "AuthServiceSecurityGroupfromSupabaseKongServiceSecurityGroupB3C4AC8F99999367C437": Object {
      "DependsOn": Array [
        "AuthTaskDefTaskRole8CE224AF",
      ],
      "Properties": Object {
        "Description": "from SupabaseKongServiceSecurityGroupB3C4AC8F:9999",
        "FromPort": 9999,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "AuthServiceSecurityGroup6440464F",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongServiceSecurityGroupE199EE6C",
            "GroupId",
          ],
        },
        "ToPort": 9999,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "AuthServiceTaskCountTarget07A8CCD2": Object {
      "Condition": "AuthAutoScalingEnabled0CD7354E",
      "DependsOn": Array [
        "AuthTaskDefTaskRole8CE224AF",
      ],
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 2,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "AuthServiceBA690728",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "AuthServiceTaskCountTargetScaleOnCpu0847ACEC": Object {
      "Condition": "AuthAutoScalingEnabled0CD7354E",
      "DependsOn": Array [
        "AuthTaskDefTaskRole8CE224AF",
      ],
      "Properties": Object {
        "PolicyName": "SupabaseAuthServiceTaskCountTargetScaleOnCpu253117F9",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "AuthServiceTaskCountTarget07A8CCD2",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "AuthTaskDef5FB652ED": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "GOTRUE_API_HOST",
                "Value": "0.0.0.0",
              },
              Object {
                "Name": "GOTRUE_API_PORT",
                "Value": "9999",
              },
              Object {
                "Name": "API_EXTERNAL_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CdnDistribution149FA6C8",
                          "DomainName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_DB_DRIVER",
                "Value": "postgres",
              },
              Object {
                "Name": "GOTRUE_SITE_URL",
                "Value": Object {
                  "Ref": "SiteUrl",
                },
              },
              Object {
                "Name": "GOTRUE_URI_ALLOW_LIST",
                "Value": Object {
                  "Ref": "RedirectUrls",
                },
              },
              Object {
                "Name": "GOTRUE_DISABLE_SIGNUP",
                "Value": Object {
                  "Ref": "DisableSignup",
                },
              },
              Object {
                "Name": "GOTRUE_JWT_ADMIN_ROLES",
                "Value": "service_role",
              },
              Object {
                "Name": "GOTRUE_JWT_AUD",
                "Value": "authenticated",
              },
              Object {
                "Name": "GOTRUE_JWT_DEFAULT_GROUP_NAME",
                "Value": "authenticated",
              },
              Object {
                "Name": "GOTRUE_JWT_EXP",
                "Value": Object {
                  "Ref": "JwtExpiryLimit",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_EMAIL_ENABLED",
                "Value": "true",
              },
              Object {
                "Name": "GOTRUE_MAILER_AUTOCONFIRM",
                "Value": "false",
              },
              Object {
                "Name": "GOTRUE_SMTP_ADMIN_EMAIL",
                "Value": Object {
                  "Fn::If": Array [
                    "WorkMailEnabled",
                    Object {
                      "Fn::GetAtt": Array [
                        "SmtpWorkMailNestedStackWorkMailNestedStackResource042ECB25",
                        "Outputs.SupabaseSmtpWorkMailOrganizationSupabaseBD859A4AEmail",
                      ],
                    },
                    Object {
                      "Ref": "Email",
                    },
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_HOST",
                "Value": Object {
                  "Fn::If": Array [
                    "WorkMailEnabled",
                    Object {
                      "Fn::Join": Array [
                        "",
                        Array [
                          "smtp.mail.",
                          Object {
                            "Ref": "SesRegion",
                          },
                          ".awsapps.com",
                        ],
                      ],
                    },
                    Object {
                      "Fn::Join": Array [
                        "",
                        Array [
                          "email-smtp.",
                          Object {
                            "Ref": "SesRegion",
                          },
                          ".amazonaws.com",
                        ],
                      ],
                    },
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_PORT",
                "Value": "465",
              },
              Object {
                "Name": "GOTRUE_SMTP_SENDER_NAME",
                "Value": Object {
                  "Ref": "SenderName",
                },
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_INVITE",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_CONFIRMATION",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_RECOVERY",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_PHONE_ENABLED",
                "Value": "false",
              },
              Object {
                "Name": "GOTRUE_SMS_AUTOCONFIRM",
                "Value": "true",
              },
              Object {
                "Name": "GOTRUE_RATE_LIMIT_EMAIL_SENT",
                "Value": "3600",
              },
              Object {
                "Name": "GOTRUE_PASSWORD_MIN_LENGTH",
                "Value": Object {
                  "Ref": "PasswordMinLength",
                },
              },
              Object {
                "Name": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "GOTRUE_EXTERNAL_",
                      Object {
                        "Fn::If": Array [
                          "AuthProvider1Enabled983DA6B5",
                          Object {
                            "Ref": "AuthProvider1Name740DD3F6",
                          },
                          "PROVIDER1",
                        ],
                      },
                      "_ENABLED",
                    ],
                  ],
                },
                "Value": Object {
                  "Fn::If": Array [
                    "AuthProvider1Enabled983DA6B5",
                    "true",
                    "false",
                  ],
                },
              },
              Object {
                "Name": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "GOTRUE_EXTERNAL_",
                      Object {
                        "Fn::If": Array [
                          "AuthProvider1Enabled983DA6B5",
                          Object {
                            "Ref": "AuthProvider1Name740DD3F6",
                          },
                          "PROVIDER1",
                        ],
                      },
                      "_REDIRECT_URI",
                    ],
                  ],
                },
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CdnDistribution149FA6C8",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
              Object {
                "Name": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "GOTRUE_EXTERNAL_",
                      Object {
                        "Fn::If": Array [
                          "AuthProvider2Enabled05B8862B",
                          Object {
                            "Ref": "AuthProvider2Name573986E5",
                          },
                          "PROVIDER2",
                        ],
                      },
                      "_ENABLED",
                    ],
                  ],
                },
                "Value": Object {
                  "Fn::If": Array [
                    "AuthProvider2Enabled05B8862B",
                    "true",
                    "false",
                  ],
                },
              },
              Object {
                "Name": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "GOTRUE_EXTERNAL_",
                      Object {
                        "Fn::If": Array [
                          "AuthProvider2Enabled05B8862B",
                          Object {
                            "Ref": "AuthProvider2Name573986E5",
                          },
                          "PROVIDER2",
                        ],
                      },
                      "_REDIRECT_URI",
                    ],
                  ],
                },
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CdnDistribution149FA6C8",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
              Object {
                "Name": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "GOTRUE_EXTERNAL_",
                      Object {
                        "Fn::If": Array [
                          "AuthProvider3Enabled464D1673",
                          Object {
                            "Ref": "AuthProvider3NameA8A7785F",
                          },
                          "PROVIDER3",
                        ],
                      },
                      "_ENABLED",
                    ],
                  ],
                },
                "Value": Object {
                  "Fn::If": Array [
                    "AuthProvider3Enabled464D1673",
                    "true",
                    "false",
                  ],
                },
              },
              Object {
                "Name": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "GOTRUE_EXTERNAL_",
                      Object {
                        "Fn::If": Array [
                          "AuthProvider3Enabled464D1673",
                          Object {
                            "Ref": "AuthProvider3NameA8A7785F",
                          },
                          "PROVIDER3",
                        ],
                      },
                      "_REDIRECT_URI",
                    ],
                  ],
                },
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CdnDistribution149FA6C8",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "wget",
                "--no-verbose",
                "--tries=1",
                "--spider",
                "http://localhost:9999/health",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": Object {
              "Ref": "AuthImageUri",
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "AuthLogs940C0551",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 9999,
                "Name": "http",
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "GOTRUE_DB_DATABASE_URL",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabasesupabaseauthadminSecretC3287578",
                      },
                      ":uri::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "JwtSecretB8834B39",
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SmtpSecretF89CC16B",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_PASS",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SmtpSecretF89CC16B",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              Object {
                "Name": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "GOTRUE_EXTERNAL_",
                      Object {
                        "Fn::If": Array [
                          "AuthProvider1Enabled983DA6B5",
                          Object {
                            "Ref": "AuthProvider1Name740DD3F6",
                          },
                          "PROVIDER1",
                        ],
                      },
                      "_CLIENT_ID",
                    ],
                  ],
                },
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "AuthProvider1ClientIdParameterA8CDD11D",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "GOTRUE_EXTERNAL_",
                      Object {
                        "Fn::If": Array [
                          "AuthProvider1Enabled983DA6B5",
                          Object {
                            "Ref": "AuthProvider1Name740DD3F6",
                          },
                          "PROVIDER1",
                        ],
                      },
                      "_SECRET",
                    ],
                  ],
                },
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "AuthProvider1SecretParameter32101B7A",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "GOTRUE_EXTERNAL_",
                      Object {
                        "Fn::If": Array [
                          "AuthProvider2Enabled05B8862B",
                          Object {
                            "Ref": "AuthProvider2Name573986E5",
                          },
                          "PROVIDER2",
                        ],
                      },
                      "_CLIENT_ID",
                    ],
                  ],
                },
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "AuthProvider2ClientIdParameter30D2A6D6",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "GOTRUE_EXTERNAL_",
                      Object {
                        "Fn::If": Array [
                          "AuthProvider2Enabled05B8862B",
                          Object {
                            "Ref": "AuthProvider2Name573986E5",
                          },
                          "PROVIDER2",
                        ],
                      },
                      "_SECRET",
                    ],
                  ],
                },
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "AuthProvider2SecretParameter4B28A4BE",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "GOTRUE_EXTERNAL_",
                      Object {
                        "Fn::If": Array [
                          "AuthProvider3Enabled464D1673",
                          Object {
                            "Ref": "AuthProvider3NameA8A7785F",
                          },
                          "PROVIDER3",
                        ],
                      },
                      "_CLIENT_ID",
                    ],
                  ],
                },
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "AuthProvider3ClientIdParameter6DA38073",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "GOTRUE_EXTERNAL_",
                      Object {
                        "Fn::If": Array [
                          "AuthProvider3Enabled464D1673",
                          Object {
                            "Ref": "AuthProvider3NameA8A7785F",
                          },
                          "PROVIDER3",
                        ],
                      },
                      "_SECRET",
                    ],
                  ],
                },
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "AuthProvider3SecretParameter7A77F7F4",
                      },
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": Object {
          "Fn::FindInMap": Array [
            "TaskSize",
            Object {
              "Ref": "AuthTaskSize9895C206",
            },
            "cpu",
          ],
        },
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "AuthTaskDefExecutionRole071231B5",
            "Arn",
          ],
        },
        "Family": "SupabaseAuthTaskDef66536EFB",
        "Memory": Object {
          "Fn::FindInMap": Array [
            "TaskSize",
            Object {
              "Ref": "AuthTaskSize9895C206",
            },
            "memory",
          ],
        },
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "AuthTaskDefTaskRole8CE224AF",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "AuthTaskDefExecutionRole071231B5": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthTaskDefExecutionRoleDefaultPolicyB7AFF08D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "AuthLogs940C0551",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabasesupabaseauthadminSecretC3287578",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "JwtSecretB8834B39",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SmtpSecretF89CC16B",
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "AuthProvider1ClientIdParameterA8CDD11D",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "AuthProvider1SecretParameter32101B7A",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "AuthProvider2ClientIdParameter30D2A6D6",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "AuthProvider2SecretParameter4B28A4BE",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "AuthProvider3ClientIdParameter6DA38073",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "AuthProvider3SecretParameter7A77F7F4",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AuthTaskDefExecutionRoleDefaultPolicyB7AFF08D",
        "Roles": Array [
          Object {
            "Ref": "AuthTaskDefExecutionRole071231B5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AuthTaskDefTaskRole8CE224AF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "Bucket83908E77": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "CdnCacheManagerApiFunction8F3CC846": Object {
      "DependsOn": Array [
        "CdnCacheManagerApiFunctionServiceRoleDefaultPolicy74947A18",
        "CdnCacheManagerApiFunctionServiceRoleA4D8F8DB",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8a91672f58486c885aa9527e06ea94ef8dcbadc65b50e3e6eff95ea5f50fb0ae.zip",
        },
        "Description": "Supabase/Cdn/CacheManager/ApiFunction",
        "Environment": Object {
          "Variables": Object {
            "API_KEY": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "{{resolve:secretsmanager:",
                  Object {
                    "Ref": "CdnCacheManagerApiKey137D2795",
                  },
                  ":SecretString:::}}",
                ],
              ],
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "QUEUE_URL": Object {
              "Ref": "CdnCacheManagerQueue786D7FA2",
            },
          },
        },
        "Handler": "index.handler",
        "Layers": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:aws:lambda:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":094274105915:layer:AWSLambdaPowertoolsTypeScript:23",
              ],
            ],
          },
        ],
        "Role": Object {
          "Fn::GetAtt": Array [
            "CdnCacheManagerApiFunctionServiceRoleA4D8F8DB",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "CdnCacheManagerApiFunctionFunctionUrl37928FC6": Object {
      "Properties": Object {
        "AuthType": "NONE",
        "TargetFunctionArn": Object {
          "Fn::GetAtt": Array [
            "CdnCacheManagerApiFunction8F3CC846",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Url",
    },
    "CdnCacheManagerApiFunctionServiceRoleA4D8F8DB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CdnCacheManagerApiFunctionServiceRoleDefaultPolicy74947A18": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "CdnCacheManagerQueue786D7FA2",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CdnCacheManagerApiFunctionServiceRoleDefaultPolicy74947A18",
        "Roles": Array [
          Object {
            "Ref": "CdnCacheManagerApiFunctionServiceRoleA4D8F8DB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CdnCacheManagerApiFunctioninvokefunctionurl25D0AB1E": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunctionUrl",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "CdnCacheManagerApiFunction8F3CC846",
            "Arn",
          ],
        },
        "FunctionUrlAuthType": "NONE",
        "Principal": "*",
      },
      "Type": "AWS::Lambda::Permission",
    },
    "CdnCacheManagerApiKey137D2795": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": "Supabase - API key for CDN cache manager",
        "GenerateSecretString": Object {
          "ExcludePunctuation": true,
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-CDN-CacheManager-ApiKey",
            ],
          ],
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "CdnCacheManagerQueue786D7FA2": Object {
      "DeletionPolicy": "Delete",
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "CdnCacheManagerQueueConsumerA50B36C1": Object {
      "DependsOn": Array [
        "CdnCacheManagerQueueConsumerServiceRoleDefaultPolicy2DE8002E",
        "CdnCacheManagerQueueConsumerServiceRole273BAAFA",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "703e21783239f1557ffe7219fab4fb09901f0ebdefca6570ebb946dd10f3085b.zip",
        },
        "Description": "Supabase/Cdn/CacheManager/QueueConsumer",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DISTRIBUTION_ID": Object {
              "Ref": "CdnDistribution149FA6C8",
            },
          },
        },
        "Handler": "index.handler",
        "Layers": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:aws:lambda:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":094274105915:layer:AWSLambdaPowertoolsTypeScript:23",
              ],
            ],
          },
        ],
        "Role": Object {
          "Fn::GetAtt": Array [
            "CdnCacheManagerQueueConsumerServiceRole273BAAFA",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "CdnCacheManagerQueueConsumerServiceRole273BAAFA": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CdnCacheManagerQueueConsumerServiceRoleDefaultPolicy2DE8002E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "cloudfront:CreateInvalidation",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:cloudfront::",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":distribution/",
                    Object {
                      "Ref": "CdnDistribution149FA6C8",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "CdnCacheManagerQueue786D7FA2",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CdnCacheManagerQueueConsumerServiceRoleDefaultPolicy2DE8002E",
        "Roles": Array [
          Object {
            "Ref": "CdnCacheManagerQueueConsumerServiceRole273BAAFA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CdnCacheManagerQueueConsumerSqsEventSourceSupabaseCdnCacheManagerQueue31D5861E48E96905": Object {
      "Properties": Object {
        "BatchSize": 100,
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "CdnCacheManagerQueue786D7FA2",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Ref": "CdnCacheManagerQueueConsumerA50B36C1",
        },
        "MaximumBatchingWindowInSeconds": 5,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "CdnCachePolicy957D7474": Object {
      "Properties": Object {
        "CachePolicyConfig": Object {
          "Comment": "Policy for Supabase API",
          "DefaultTTL": 1,
          "MaxTTL": 600,
          "MinTTL": 0,
          "Name": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "AWS::StackName",
                },
                "-CachePolicy-",
                Object {
                  "Ref": "AWS::Region",
                },
              ],
            ],
          },
          "ParametersInCacheKeyAndForwardedToOrigin": Object {
            "CookiesConfig": Object {
              "CookieBehavior": "none",
            },
            "EnableAcceptEncodingBrotli": true,
            "EnableAcceptEncodingGzip": true,
            "HeadersConfig": Object {
              "HeaderBehavior": "whitelist",
              "Headers": Array [
                "apikey",
                "authorization",
                "host",
              ],
            },
            "QueryStringsConfig": Object {
              "QueryStringBehavior": "all",
            },
          },
        },
      },
      "Type": "AWS::CloudFront::CachePolicy",
    },
    "CdnDistribution149FA6C8": Object {
      "Properties": Object {
        "DistributionConfig": Object {
          "CacheBehaviors": Array [
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "storage/v1/object/public/*",
              "ResponseHeadersPolicyId": Object {
                "Ref": "CdnResponseHeadersPolicy36E4B823",
              },
              "TargetOriginId": "SupabaseCdnDistributionOrigin1C1F18041",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
          ],
          "Comment": "Supabase - CDN (Supabase/Cdn/Distribution)",
          "CustomErrorResponses": Array [
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 500,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 501,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 502,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 503,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 504,
            },
          ],
          "DefaultCacheBehavior": Object {
            "AllowedMethods": Array [
              "GET",
              "HEAD",
              "OPTIONS",
              "PUT",
              "PATCH",
              "POST",
              "DELETE",
            ],
            "CachePolicyId": Object {
              "Ref": "CdnCachePolicy957D7474",
            },
            "Compress": true,
            "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
            "ResponseHeadersPolicyId": Object {
              "Ref": "CdnResponseHeadersPolicy36E4B823",
            },
            "TargetOriginId": "SupabaseCdnDistributionOrigin1C1F18041",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2and3",
          "IPV6Enabled": true,
          "Origins": Array [
            Object {
              "CustomOriginConfig": Object {
                "OriginProtocolPolicy": "http-only",
                "OriginSSLProtocols": Array [
                  "TLSv1.2",
                ],
              },
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "LoadBalancerBE9EEC3A",
                  "DNSName",
                ],
              },
              "Id": "SupabaseCdnDistributionOrigin1C1F18041",
            },
          ],
          "WebACLId": Object {
            "Fn::If": Array [
              "CdnWafDisabledF333CA7D",
              Object {
                "Ref": "AWS::NoValue",
              },
              Object {
                "Ref": "WebAclArn",
              },
            ],
          },
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "CdnResponseHeadersPolicy36E4B823": Object {
      "Properties": Object {
        "ResponseHeadersPolicyConfig": Object {
          "Comment": "Policy for Supabase API",
          "CustomHeadersConfig": Object {
            "Items": Array [
              Object {
                "Header": "server",
                "Override": true,
                "Value": "cloudfront",
              },
            ],
          },
          "Name": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "AWS::StackName",
                },
                "-ResponseHeadersPolicy-",
                Object {
                  "Ref": "AWS::Region",
                },
              ],
            ],
          },
        },
      },
      "Type": "AWS::CloudFront::ResponseHeadersPolicy",
    },
    "CloudFrontPrefixList22014EFD": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "CloudFrontPrefixListCustomResourcePolicyB6BABDE5",
      ],
      "Properties": Object {
        "Create": "{\\"service\\":\\"EC2\\",\\"action\\":\\"describeManagedPrefixLists\\",\\"parameters\\":{\\"Filters\\":[{\\"Name\\":\\"prefix-list-name\\",\\"Values\\":[\\"com.amazonaws.global.cloudfront.origin-facing\\"]}]},\\"physicalResourceId\\":{\\"responsePath\\":\\"PrefixLists.0.PrefixListId\\"}}",
        "InstallLatestAwsSdk": true,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
      },
      "Type": "Custom::PrefixList",
      "UpdateReplacePolicy": "Delete",
    },
    "CloudFrontPrefixListCustomResourcePolicyB6BABDE5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ec2:DescribeManagedPrefixLists",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudFrontPrefixListCustomResourcePolicyB6BABDE5",
        "Roles": Array [
          Object {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Cluster3DA9CCBA": Object {
      "Properties": Object {
        "CapacityProviders": Array [
          "FARGATE",
          "FARGATE_SPOT",
        ],
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DefaultCapacityProviderStrategy": Array [],
      },
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
    },
    "ClusterDefaultServiceDiscoveryNamespaceC336F9B4": Object {
      "Properties": Object {
        "Name": "supabase.internal",
        "Vpc": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::ServiceDiscovery::PrivateDnsNamespace",
    },
    "ClusterEB0386A7": Object {
      "Properties": Object {
        "ClusterSettings": Array [
          Object {
            "Name": "containerInsights",
            "Value": "disabled",
          },
        ],
        "ServiceConnectDefaults": Object {
          "Namespace": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::ECS::Cluster",
    },
    "CookieSigningSecretE5797145": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": "Supabase - Cookie Signing Secret for Realtime",
        "GenerateSecretString": Object {
          "ExcludePunctuation": true,
          "PasswordLength": 64,
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-Realtime-CookieSigning-Secret",
            ],
          ],
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseCluster5B53A178": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "CopyTagsToSnapshot": true,
        "DBClusterParameterGroupName": Object {
          "Ref": "DatabaseParameterGroup2A921026",
        },
        "DBSubnetGroupName": Object {
          "Ref": "DatabaseClusterSubnets5540150D",
        },
        "DatabaseName": "postgres",
        "Engine": "aurora-postgresql",
        "EngineVersion": "15.4",
        "MasterUserPassword": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{{resolve:secretsmanager:",
              Object {
                "Ref": "SupabaseDatabaseClusterSecret2AA4A5CD3fdaad7efa858a3daf9490cf0a702aeb",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": "supabase_admin",
        "Port": 5432,
        "ServerlessV2ScalingConfiguration": Object {
          "MaxCapacity": Object {
            "Ref": "MaxACU",
          },
          "MinCapacity": Object {
            "Ref": "MinACU",
          },
        },
        "StorageEncrypted": true,
        "VpcSecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "DatabaseClusterSecurityGroupFEF1426A",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBCluster",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseClusterInstance1E154D1E9": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": Object {
        "DBClusterIdentifier": Object {
          "Ref": "DatabaseCluster5B53A178",
        },
        "DBInstanceClass": "db.serverless",
        "Engine": "aurora-postgresql",
        "PromotionTier": 0,
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseClusterInstance2D6BCD1AC": Object {
      "Condition": "HighAvailability",
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": Object {
        "DBClusterIdentifier": Object {
          "Ref": "DatabaseCluster5B53A178",
        },
        "DBInstanceClass": "db.serverless",
        "Engine": "aurora-postgresql",
        "PromotionTier": 1,
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseClusterSecretAttachmentDC8466C0": Object {
      "Properties": Object {
        "SecretId": Object {
          "Ref": "SupabaseDatabaseClusterSecret2AA4A5CD3fdaad7efa858a3daf9490cf0a702aeb",
        },
        "TargetId": Object {
          "Ref": "DatabaseCluster5B53A178",
        },
        "TargetType": "AWS::RDS::DBCluster",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "DatabaseClusterSecurityGroupFEF1426A": Object {
      "Properties": Object {
        "GroupDescription": "RDS security group",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DatabaseClusterSecurityGroupfromSupabaseAuthServiceSecurityGroupC0652D23IndirectPort316A82A5": Object {
      "Properties": Object {
        "Description": "from SupabaseAuthServiceSecurityGroupC0652D23:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseCluster5B53A178",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseClusterSecurityGroupFEF1426A",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "AuthServiceSecurityGroup6440464F",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseCluster5B53A178",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseClusterSecurityGroupfromSupabaseDatabaseMigrationFunctionSecurityGroup2273CFF4IndirectPort7EBF4AAA": Object {
      "Properties": Object {
        "Description": "from SupabaseDatabaseMigrationFunctionSecurityGroup2273CFF4:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseCluster5B53A178",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseClusterSecurityGroupFEF1426A",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseMigrationFunctionSecurityGroup279B26A2",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseCluster5B53A178",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseClusterSecurityGroupfromSupabaseDatabaseUserPasswordFunctionSecurityGroup71503A07IndirectPort8134897C": Object {
      "Properties": Object {
        "Description": "from SupabaseDatabaseUserPasswordFunctionSecurityGroup71503A07:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseCluster5B53A178",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseClusterSecurityGroupFEF1426A",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseUserPasswordFunctionSecurityGroup2C5B42FB",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseCluster5B53A178",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseClusterSecurityGroupfromSupabaseMetaServiceSecurityGroup8C22DD35IndirectPort496372C3": Object {
      "Properties": Object {
        "Description": "from SupabaseMetaServiceSecurityGroup8C22DD35:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseCluster5B53A178",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseClusterSecurityGroupFEF1426A",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "MetaServiceSecurityGroup0E39DF35",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseCluster5B53A178",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseClusterSecurityGroupfromSupabaseRealtimeServiceSecurityGroup570992FEIndirectPort1FAA9E4F": Object {
      "Properties": Object {
        "Description": "from SupabaseRealtimeServiceSecurityGroup570992FE:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseCluster5B53A178",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseClusterSecurityGroupFEF1426A",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "RealtimeServiceSecurityGroup8E245E7E",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseCluster5B53A178",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseClusterSecurityGroupfromSupabaseRestServiceSecurityGroupC3243DF3IndirectPort2D0B0423": Object {
      "Properties": Object {
        "Description": "from SupabaseRestServiceSecurityGroupC3243DF3:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseCluster5B53A178",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseClusterSecurityGroupFEF1426A",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "RestServiceSecurityGroup0BAEA949",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseCluster5B53A178",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseClusterSecurityGroupfromSupabaseStorageServiceSecurityGroupADF822D4IndirectPort3CE1B682": Object {
      "Properties": Object {
        "Description": "from SupabaseStorageServiceSecurityGroupADF822D4:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseCluster5B53A178",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseClusterSecurityGroupFEF1426A",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StorageServiceSecurityGroupF6280DC0",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseCluster5B53A178",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseClusterSubnets5540150D": Object {
      "Properties": Object {
        "DBSubnetGroupDescription": "Subnets for Cluster database",
        "SubnetIds": Array [
          Object {
            "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
          },
          Object {
            "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "DatabaseMigration993F5B9C": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseClusterInstance1E154D1E9",
      ],
      "Properties": Object {
        "Fingerprint": "3588f4b3167a4650ea4dfd3aea3e53facfba6a2fe38d749488dcb1623202b110",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DatabaseMigrationProviderframeworkonEvent48D76DDA",
            "Arn",
          ],
        },
      },
      "Type": "Custom::DatabaseMigration",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseMigrationFunction9CBE9EA5": Object {
      "DependsOn": Array [
        "DatabaseMigrationFunctionServiceRoleDefaultPolicyBAA52D03",
        "DatabaseMigrationFunctionServiceRoleE25C2000",
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "67a7f982847312f00fe63a7caafa9e6daaa88c8fb1a0a471e5a41bbf18d1aab6.zip",
        },
        "Description": "Supabase - Database migration function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DB_SECRET_ARN": Object {
              "Ref": "DatabaseClusterSecretAttachmentDC8466C0",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DatabaseMigrationFunctionServiceRoleE25C2000",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 60,
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "DatabaseMigrationFunctionSecurityGroup279B26A2",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": Array [
            Object {
              "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
            },
            Object {
              "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "DatabaseMigrationFunctionSecurityGroup279B26A2": Object {
      "DependsOn": Array [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": Object {
        "GroupDescription": "Automatic security group for Lambda Function SupabaseDatabaseMigrationFunction60EA2449",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DatabaseMigrationFunctionServiceRoleDefaultPolicyBAA52D03": Object {
      "DependsOn": Array [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseClusterSecretAttachmentDC8466C0",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseMigrationFunctionServiceRoleDefaultPolicyBAA52D03",
        "Roles": Array [
          Object {
            "Ref": "DatabaseMigrationFunctionServiceRoleE25C2000",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseMigrationFunctionServiceRoleE25C2000": Object {
      "DependsOn": Array [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseMigrationProviderframeworkonEvent48D76DDA": Object {
      "DependsOn": Array [
        "DatabaseMigrationProviderframeworkonEventServiceRoleDefaultPolicyDFB3465C",
        "DatabaseMigrationProviderframeworkonEventServiceRole5CABFD28",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase/Database/MigrationProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "DatabaseMigrationFunction9CBE9EA5",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DatabaseMigrationProviderframeworkonEventServiceRole5CABFD28",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DatabaseMigrationProviderframeworkonEventServiceRole5CABFD28": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseMigrationProviderframeworkonEventServiceRoleDefaultPolicyDFB3465C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DatabaseMigrationFunction9CBE9EA5",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DatabaseMigrationFunction9CBE9EA5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseMigrationProviderframeworkonEventServiceRoleDefaultPolicyDFB3465C",
        "Roles": Array [
          Object {
            "Ref": "DatabaseMigrationProviderframeworkonEventServiceRole5CABFD28",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseParameterGroup2A921026": Object {
      "Properties": Object {
        "Description": "Parameter group for Supabase",
        "Family": "aurora-postgresql15",
        "Parameters": Object {
          "max_slot_wal_keep_size": "1024",
          "rds.force_ssl": "0",
          "rds.logical_replication": "1",
          "shared_preload_libraries": "pg_tle, pg_stat_statements, pgaudit, pg_cron",
        },
      },
      "Type": "AWS::RDS::DBClusterParameterGroup",
    },
    "DatabaseUserPasswordFunctionAFAC7436": Object {
      "DependsOn": Array [
        "DatabaseUserPasswordFunctionServiceRoleDefaultPolicy8E1C300C",
        "DatabaseUserPasswordFunctionServiceRoleD208DCC1",
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "0facf62e98b9e41309a759dcee61e370003b40a5402e2f2c8f74308681c96fe3.zip",
        },
        "Description": "Supabase - DB user password function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DB_SECRET_ARN": Object {
              "Ref": "DatabaseClusterSecretAttachmentDC8466C0",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DatabaseUserPasswordFunctionServiceRoleD208DCC1",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 10,
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "DatabaseUserPasswordFunctionSecurityGroup2C5B42FB",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": Array [
            Object {
              "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
            },
            Object {
              "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "DatabaseUserPasswordFunctionSecurityGroup2C5B42FB": Object {
      "DependsOn": Array [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": Object {
        "GroupDescription": "Automatic security group for Lambda Function SupabaseDatabaseUserPasswordFunction2F544B74",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DatabaseUserPasswordFunctionServiceRoleD208DCC1": Object {
      "DependsOn": Array [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseUserPasswordFunctionServiceRoleDefaultPolicy8E1C300C": Object {
      "DependsOn": Array [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:PutSecretValue",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:secretsmanager:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":secret:",
                    Object {
                      "Ref": "AWS::StackName",
                    },
                    "-Database-*",
                  ],
                ],
              },
            },
            Object {
              "Effect": "Allow",
              "NotAction": "secretsmanager:PutSecretValue",
              "Resource": Object {
                "Ref": "DatabaseClusterSecretAttachmentDC8466C0",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseUserPasswordFunctionServiceRoleDefaultPolicy8E1C300C",
        "Roles": Array [
          Object {
            "Ref": "DatabaseUserPasswordFunctionServiceRoleD208DCC1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseUserPasswordProviderframeworkonEventB02AAC24": Object {
      "DependsOn": Array [
        "DatabaseUserPasswordProviderframeworkonEventServiceRoleDefaultPolicyAA1280B0",
        "DatabaseUserPasswordProviderframeworkonEventServiceRole6ABBAA88",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase/Database/UserPasswordProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "DatabaseUserPasswordFunctionAFAC7436",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DatabaseUserPasswordProviderframeworkonEventServiceRole6ABBAA88",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DatabaseUserPasswordProviderframeworkonEventServiceRole6ABBAA88": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseUserPasswordProviderframeworkonEventServiceRoleDefaultPolicyAA1280B0": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DatabaseUserPasswordFunctionAFAC7436",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DatabaseUserPasswordFunctionAFAC7436",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseUserPasswordProviderframeworkonEventServiceRoleDefaultPolicyAA1280B0",
        "Roles": Array [
          Object {
            "Ref": "DatabaseUserPasswordProviderframeworkonEventServiceRole6ABBAA88",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Databaseauthenticator35B4E8E9": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
      ],
      "Properties": Object {
        "SecretId": Object {
          "Ref": "DatabaseauthenticatorSecret69FA14DE",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DatabaseUserPasswordProviderframeworkonEventB02AAC24",
            "Arn",
          ],
        },
        "Username": "authenticator",
      },
      "Type": "Custom::DatabaseUserPassword",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseauthenticatorSecret69FA14DE": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
      ],
      "Properties": Object {
        "Description": "Supabase - Database User authenticator",
        "GenerateSecretString": Object {
          "ExcludePunctuation": true,
          "GenerateStringKey": "password",
          "SecretStringTemplate": "{\\"username\\":\\"authenticator\\"}",
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-Database-authenticator",
            ],
          ],
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabasedashboarduserBEF03EEC": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
      ],
      "Properties": Object {
        "SecretId": Object {
          "Ref": "DatabasedashboarduserSecret102D2F3B",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DatabaseUserPasswordProviderframeworkonEventB02AAC24",
            "Arn",
          ],
        },
        "Username": "dashboard_user",
      },
      "Type": "Custom::DatabaseUserPassword",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabasedashboarduserSecret102D2F3B": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
      ],
      "Properties": Object {
        "Description": "Supabase - Database User dashboard_user",
        "GenerateSecretString": Object {
          "ExcludePunctuation": true,
          "GenerateStringKey": "password",
          "SecretStringTemplate": "{\\"username\\":\\"dashboard_user\\"}",
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-Database-dashboard_user",
            ],
          ],
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabasepostgresDCE7DA96": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
      ],
      "Properties": Object {
        "SecretId": Object {
          "Ref": "DatabasepostgresSecret8E64AF98",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DatabaseUserPasswordProviderframeworkonEventB02AAC24",
            "Arn",
          ],
        },
        "Username": "postgres",
      },
      "Type": "Custom::DatabaseUserPassword",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabasepostgresSecret8E64AF98": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
      ],
      "Properties": Object {
        "Description": "Supabase - Database User postgres",
        "GenerateSecretString": Object {
          "ExcludePunctuation": true,
          "GenerateStringKey": "password",
          "SecretStringTemplate": "{\\"username\\":\\"postgres\\"}",
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-Database-postgres",
            ],
          ],
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabasesupabaseauthadminF9154F88": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
      ],
      "Properties": Object {
        "SecretId": Object {
          "Ref": "DatabasesupabaseauthadminSecretC3287578",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DatabaseUserPasswordProviderframeworkonEventB02AAC24",
            "Arn",
          ],
        },
        "Username": "supabase_auth_admin",
      },
      "Type": "Custom::DatabaseUserPassword",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabasesupabaseauthadminSecretC3287578": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
      ],
      "Properties": Object {
        "Description": "Supabase - Database User supabase_auth_admin",
        "GenerateSecretString": Object {
          "ExcludePunctuation": true,
          "GenerateStringKey": "password",
          "SecretStringTemplate": "{\\"username\\":\\"supabase_auth_admin\\"}",
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-Database-supabase_auth_admin",
            ],
          ],
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabasesupabasestorageadminA3D9AA2C": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
      ],
      "Properties": Object {
        "SecretId": Object {
          "Ref": "DatabasesupabasestorageadminSecret88C76AA3",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DatabaseUserPasswordProviderframeworkonEventB02AAC24",
            "Arn",
          ],
        },
        "Username": "supabase_storage_admin",
      },
      "Type": "Custom::DatabaseUserPassword",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabasesupabasestorageadminSecret88C76AA3": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
      ],
      "Properties": Object {
        "Description": "Supabase - Database User supabase_storage_admin",
        "GenerateSecretString": Object {
          "ExcludePunctuation": true,
          "GenerateStringKey": "password",
          "SecretStringTemplate": "{\\"username\\":\\"supabase_storage_admin\\"}",
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-Database-supabase_storage_admin",
            ],
          ],
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "ForceDeployJobStateMachine528644B1": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "ForceDeployJobStateMachineRoleDefaultPolicyD8B5C2E1",
        "ForceDeployJobStateMachineRoleB8306D93",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"CheckInput\\",\\"States\\":{\\"CheckInput\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Variable\\":\\"$.services\\",\\"IsPresent\\":true,\\"Next\\":\\"ForceDeployment\\"}],\\"Default\\":\\"GetEcsServiceList\\"},\\"GetEcsServiceList\\":{\\"Next\\":\\"ForceDeployment\\",\\"Type\\":\\"Task\\",\\"Comment\\":\\"Fetch ECS Services\\",\\"ResultSelector\\":{\\"services.$\\":\\"$.ServiceArns\\"},\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::aws-sdk:ecs:listServices\\",\\"Parameters\\":{\\"Cluster\\":\\"",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "\\"}},\\"ForceDeployment\\":{\\"Type\\":\\"Map\\",\\"End\\":true,\\"Parameters\\":{\\"service.$\\":\\"$$.Map.Item.Value\\"},\\"Iterator\\":{\\"StartAt\\":\\"ForceDeployEcsTask\\",\\"States\\":{\\"ForceDeployEcsTask\\":{\\"End\\":true,\\"Type\\":\\"Task\\",\\"Comment\\":\\"Force deploy ECS Tasks\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::aws-sdk:ecs:updateService\\",\\"Parameters\\":{\\"Cluster\\":\\"",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "\\",\\"Service.$\\":\\"$.service\\",\\"ForceNewDeployment\\":true}}}},\\"ItemsPath\\":\\"$.services\\"}}}",
            ],
          ],
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "ForceDeployJobStateMachineRoleB8306D93",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "ForceDeployJobStateMachineEventsRole3137AB10": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ForceDeployJobStateMachineEventsRoleDefaultPolicy485FD53C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "ForceDeployJobStateMachine528644B1",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ForceDeployJobStateMachineEventsRoleDefaultPolicy485FD53C",
        "Roles": Array [
          Object {
            "Ref": "ForceDeployJobStateMachineEventsRole3137AB10",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ForceDeployJobStateMachineRoleB8306D93": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::FindInMap": Array [
                    "ServiceprincipalMap",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ForceDeployJobStateMachineRoleDefaultPolicyD8B5C2E1": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:ListServices",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":service/",
                    Object {
                      "Ref": "ClusterEB0386A7",
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ForceDeployJobStateMachineRoleDefaultPolicyD8B5C2E1",
        "Roles": Array [
          Object {
            "Ref": "ForceDeployJobStateMachineRoleB8306D93",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ImgproxyLogs00A67BBB": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "ImgproxyServiceC5851888": Object {
      "DependsOn": Array [
        "ImgproxyTaskDefTaskRoleB88D5B6D",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "Alarms": Object {
            "AlarmNames": Array [],
            "Enable": false,
            "Rollback": false,
          },
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "DesiredCount": Object {
          "Fn::If": Array [
            "ImgproxyServiceEnabled64E773FC",
            Object {
              "Ref": "AWS::NoValue",
            },
            0,
          ],
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "ImgproxyServiceSecurityGroupDD73DE99",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 5001,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "ImgproxyServiceCloudmapService9C9565A1",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "ImgproxyTaskDef33BF8CEA",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "ImgproxyServiceCloudmapService9C9565A1": Object {
      "DependsOn": Array [
        "ImgproxyTaskDefTaskRoleB88D5B6D",
      ],
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "imgproxy",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "ImgproxyServiceSecurityGroupDD73DE99": Object {
      "DependsOn": Array [
        "ImgproxyTaskDefTaskRoleB88D5B6D",
      ],
      "Properties": Object {
        "GroupDescription": "Supabase/Imgproxy/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ImgproxyServiceSecurityGroupfromSupabaseStorageServiceSecurityGroupADF822D450011E6FA973": Object {
      "DependsOn": Array [
        "ImgproxyTaskDefTaskRoleB88D5B6D",
      ],
      "Properties": Object {
        "Description": "from SupabaseStorageServiceSecurityGroupADF822D4:5001",
        "FromPort": 5001,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ImgproxyServiceSecurityGroupDD73DE99",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StorageServiceSecurityGroupF6280DC0",
            "GroupId",
          ],
        },
        "ToPort": 5001,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ImgproxyServiceTaskCountTargetC19355BF": Object {
      "Condition": "ImgproxyAutoScalingEnabled44E9E87F",
      "DependsOn": Array [
        "ImgproxyTaskDefTaskRoleB88D5B6D",
      ],
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 2,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "ImgproxyServiceC5851888",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "ImgproxyServiceTaskCountTargetScaleOnCpuADE19FC6": Object {
      "Condition": "ImgproxyAutoScalingEnabled44E9E87F",
      "DependsOn": Array [
        "ImgproxyTaskDefTaskRoleB88D5B6D",
      ],
      "Properties": Object {
        "PolicyName": "SupabaseImgproxyServiceTaskCountTargetScaleOnCpu2F1B6C7E",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "ImgproxyServiceTaskCountTargetC19355BF",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "ImgproxyTaskDef33BF8CEA": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "IMGPROXY_BIND",
                "Value": ":5001",
              },
              Object {
                "Name": "IMGPROXY_LOCAL_FILESYSTEM_ROOT",
                "Value": "/",
              },
              Object {
                "Name": "IMGPROXY_USE_ETAG",
                "Value": "true",
              },
              Object {
                "Name": "IMGPROXY_ENABLE_WEBP_DETECTION",
                "Value": "true",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "imgproxy",
                "health",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": Object {
              "Ref": "ImgproxyImageUri",
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "ImgproxyLogs00A67BBB",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 5001,
                "Name": "http",
                "Protocol": "tcp",
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": Object {
          "Fn::FindInMap": Array [
            "TaskSize",
            Object {
              "Ref": "ImgproxyTaskSize5D0DD9F6",
            },
            "cpu",
          ],
        },
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "ImgproxyTaskDefExecutionRoleE676FD35",
            "Arn",
          ],
        },
        "Family": "SupabaseImgproxyTaskDef08EEF13B",
        "Memory": Object {
          "Fn::FindInMap": Array [
            "TaskSize",
            Object {
              "Ref": "ImgproxyTaskSize5D0DD9F6",
            },
            "memory",
          ],
        },
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "ImgproxyTaskDefTaskRoleB88D5B6D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "ImgproxyTaskDefExecutionRoleDefaultPolicy28511DDA": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ImgproxyLogs00A67BBB",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ImgproxyTaskDefExecutionRoleDefaultPolicy28511DDA",
        "Roles": Array [
          Object {
            "Ref": "ImgproxyTaskDefExecutionRoleE676FD35",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ImgproxyTaskDefExecutionRoleE676FD35": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ImgproxyTaskDefTaskRoleB88D5B6D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "JwtSecretAnonKey63F37A1E": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ExpiresIn": "10y",
        "Issuer": "supabase",
        "Payload": Object {
          "role": "anon",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "JwtSecretGenerateTokenProviderframeworkonEvent34DD1AAA",
            "Arn",
          ],
        },
      },
      "Type": "Custom::JsonWebToken",
      "UpdateReplacePolicy": "Delete",
    },
    "JwtSecretAnonKeyParameter532DCC06": Object {
      "Properties": Object {
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              " - Json Web Token, role: anon",
            ],
          ],
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/JwtSecret/AnonKey",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "JwtSecretAnonKey63F37A1E",
            "Value",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "JwtSecretB8834B39": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              " - Json Web Token Secret",
            ],
          ],
        },
        "GenerateSecretString": Object {
          "ExcludePunctuation": true,
          "PasswordLength": 64,
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "JwtSecretGenerateTokenProviderframeworkonEvent34DD1AAA": Object {
      "DependsOn": Array [
        "JwtSecretGenerateTokenProviderframeworkonEventServiceRoleDefaultPolicy14F466A4",
        "JwtSecretGenerateTokenProviderframeworkonEventServiceRoleD6B5B68A",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase/JwtSecret/GenerateTokenProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "JwtSecretJsonWebTokenFunctionF8BA9D2A",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "JwtSecretGenerateTokenProviderframeworkonEventServiceRoleD6B5B68A",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "JwtSecretGenerateTokenProviderframeworkonEventServiceRoleD6B5B68A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "JwtSecretGenerateTokenProviderframeworkonEventServiceRoleDefaultPolicy14F466A4": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "JwtSecretJsonWebTokenFunctionF8BA9D2A",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "JwtSecretJsonWebTokenFunctionF8BA9D2A",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "JwtSecretGenerateTokenProviderframeworkonEventServiceRoleDefaultPolicy14F466A4",
        "Roles": Array [
          Object {
            "Ref": "JwtSecretGenerateTokenProviderframeworkonEventServiceRoleD6B5B68A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "JwtSecretJsonWebTokenFunctionF8BA9D2A": Object {
      "DependsOn": Array [
        "JwtSecretJsonWebTokenFunctionServiceRoleDefaultPolicyFEC3E7BA",
        "JwtSecretJsonWebTokenFunctionServiceRole17CF8128",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "baf945a52f8e02b1131009f27d8b23a50b9eacc020ff363093145c8e6f5dbc01.zip",
        },
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              " - Generate token via jwt secret",
            ],
          ],
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "JWT_SECRET_ARN": Object {
              "Ref": "JwtSecretB8834B39",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "JwtSecretJsonWebTokenFunctionServiceRole17CF8128",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "JwtSecretJsonWebTokenFunctionServiceRole17CF8128": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "JwtSecretJsonWebTokenFunctionServiceRoleDefaultPolicyFEC3E7BA": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "JwtSecretB8834B39",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "JwtSecretJsonWebTokenFunctionServiceRoleDefaultPolicyFEC3E7BA",
        "Roles": Array [
          Object {
            "Ref": "JwtSecretJsonWebTokenFunctionServiceRole17CF8128",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "JwtSecretServiceRoleKeyF0F6C193": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ExpiresIn": "10y",
        "Issuer": "supabase",
        "Payload": Object {
          "role": "service_role",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "JwtSecretGenerateTokenProviderframeworkonEvent34DD1AAA",
            "Arn",
          ],
        },
      },
      "Type": "Custom::JsonWebToken",
      "UpdateReplacePolicy": "Delete",
    },
    "JwtSecretServiceRoleKeyParameterB65536EB": Object {
      "Properties": Object {
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              " - Json Web Token, role: service_role",
            ],
          ],
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/JwtSecret/ServiceRoleKey",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "JwtSecretServiceRoleKeyF0F6C193",
            "Value",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "KongLogs4BD50491": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "KongService33127C91": Object {
      "DependsOn": Array [
        "KongTaskDefTaskRole62A71DDF",
        "LoadBalancerListenerE1A099B9",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "Alarms": Object {
            "AlarmNames": Array [],
            "Enable": false,
            "Rollback": false,
          },
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "DesiredCount": Object {
          "Fn::If": Array [
            "KongServiceEnabled5CB62A18",
            Object {
              "Ref": "AWS::NoValue",
            },
            0,
          ],
        },
        "EnableECSManagedTags": true,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 8000,
            "TargetGroupArn": Object {
              "Ref": "KongTargetGroupD0277B2A",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "KongServiceSecurityGroupE199EE6C",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 8000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "KongServiceCloudmapService59ECFE3A",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "KongTaskDef115E456D",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "KongServiceCloudmapService59ECFE3A": Object {
      "DependsOn": Array [
        "KongTaskDefTaskRole62A71DDF",
      ],
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "kong",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "KongServiceSecurityGroupE199EE6C": Object {
      "DependsOn": Array [
        "KongTaskDefTaskRole62A71DDF",
      ],
      "Properties": Object {
        "GroupDescription": "Supabase/Kong/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "KongServiceSecurityGroupfromSupabaseLoadBalancerSecurityGroupADDF6EB880000F4CA2E4": Object {
      "DependsOn": Array [
        "KongTaskDefTaskRole62A71DDF",
      ],
      "Properties": Object {
        "Description": "Load balancer to target",
        "FromPort": 8000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "KongServiceSecurityGroupE199EE6C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "LoadBalancerSecurityGroupA28D6DD7",
            "GroupId",
          ],
        },
        "ToPort": 8000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "KongServiceSecurityGroupfromSupabaseLoadBalancerSecurityGroupADDF6EB881008D65C13D": Object {
      "DependsOn": Array [
        "KongTaskDefTaskRole62A71DDF",
      ],
      "Properties": Object {
        "Description": "ALB healthcheck",
        "FromPort": 8100,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "KongServiceSecurityGroupE199EE6C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "LoadBalancerSecurityGroupA28D6DD7",
            "GroupId",
          ],
        },
        "ToPort": 8100,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "KongServiceTaskCountTarget5CD21EEB": Object {
      "Condition": "KongAutoScalingEnabled41DC2F80",
      "DependsOn": Array [
        "KongTaskDefTaskRole62A71DDF",
      ],
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 2,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "KongService33127C91",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "KongServiceTaskCountTargetScaleOnCpuE9FBE5E2": Object {
      "Condition": "KongAutoScalingEnabled41DC2F80",
      "DependsOn": Array [
        "KongTaskDefTaskRole62A71DDF",
      ],
      "Properties": Object {
        "PolicyName": "SupabaseKongServiceTaskCountTargetScaleOnCpu7C47F3C3",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "KongServiceTaskCountTarget5CD21EEB",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "KongTargetGroupD0277B2A": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 5,
        "HealthCheckPath": "/status",
        "HealthCheckPort": "8100",
        "HealthCheckTimeoutSeconds": 2,
        "Port": 8000,
        "Protocol": "HTTP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
          Object {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "ip",
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "KongTaskDef115E456D": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "KONG_DNS_ORDER",
                "Value": "LAST,A,CNAME",
              },
              Object {
                "Name": "KONG_PLUGINS",
                "Value": "request-transformer,cors,key-auth,acl,basic-auth,opentelemetry",
              },
              Object {
                "Name": "KONG_NGINX_PROXY_PROXY_BUFFER_SIZE",
                "Value": "160k",
              },
              Object {
                "Name": "KONG_NGINX_PROXY_PROXY_BUFFERS",
                "Value": "64 160k",
              },
              Object {
                "Name": "KONG_STATUS_LISTEN",
                "Value": "0.0.0.0:8100",
              },
              Object {
                "Name": "SUPABASE_AUTH_URL",
                "Value": "http://auth.supabase.internal:9999/",
              },
              Object {
                "Name": "SUPABASE_REST_URL",
                "Value": "http://rest.supabase.internal:3000/",
              },
              Object {
                "Name": "SUPABASE_REALTIME_URL",
                "Value": "http://realtime-dev.supabase.internal:4000/socket/",
              },
              Object {
                "Name": "SUPABASE_STORAGE_URL",
                "Value": "http://storage.supabase.internal:5000/",
              },
              Object {
                "Name": "SUPABASE_META_HOST",
                "Value": "http://meta.supabase.internal:8080/",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "kong",
                "health",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/u3p7q2r8/kong:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "KongLogs4BD50491",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8000,
                "Name": "http",
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "SUPABASE_ANON_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "JwtSecretAnonKeyParameter532DCC06",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_SERVICE_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "JwtSecretServiceRoleKeyParameterB65536EB",
                      },
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": Object {
          "Fn::FindInMap": Array [
            "TaskSize",
            Object {
              "Ref": "KongTaskSize93C195E9",
            },
            "cpu",
          ],
        },
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "KongTaskDefExecutionRole349E43DD",
            "Arn",
          ],
        },
        "Family": "SupabaseKongTaskDef151136E7",
        "Memory": Object {
          "Fn::FindInMap": Array [
            "TaskSize",
            Object {
              "Ref": "KongTaskSize93C195E9",
            },
            "memory",
          ],
        },
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "KongTaskDefTaskRole62A71DDF",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "KongTaskDefExecutionRole349E43DD": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "KongTaskDefExecutionRoleDefaultPolicy99546D68": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "KongLogs4BD50491",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "JwtSecretAnonKeyParameter532DCC06",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "JwtSecretServiceRoleKeyParameterB65536EB",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "KongTaskDefExecutionRoleDefaultPolicy99546D68",
        "Roles": Array [
          Object {
            "Ref": "KongTaskDefExecutionRole349E43DD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "KongTaskDefTaskRole62A71DDF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LoadBalancerBE9EEC3A": Object {
      "DependsOn": Array [
        "VPCPublicSubnet1DefaultRoute91CEF279",
        "VPCPublicSubnet1RouteTableAssociation0B0896DC",
        "VPCPublicSubnet2DefaultRouteB7481BBA",
        "VPCPublicSubnet2RouteTableAssociation5A808732",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "LoadBalancerSecurityGroupA28D6DD7",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Ref": "VPCPublicSubnet1SubnetB4246D30",
          },
          Object {
            "Ref": "VPCPublicSubnet2Subnet74179F39",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "LoadBalancerListenerE1A099B9": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "KongTargetGroupD0277B2A",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "LoadBalancerBE9EEC3A",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "LoadBalancerSecurityGroupA28D6DD7": Object {
      "Properties": Object {
        "GroupDescription": "Automatically created Security Group for ELB SupabaseLoadBalancer630C0AFC",
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "LoadBalancerSecurityGroupfromIndirectPeer80AB4C6575": Object {
      "Properties": Object {
        "Description": "CloudFront",
        "FromPort": 80,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "LoadBalancerSecurityGroupA28D6DD7",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourcePrefixListId": Object {
          "Fn::GetAtt": Array [
            "CloudFrontPrefixList22014EFD",
            "PrefixLists.0.PrefixListId",
          ],
        },
        "ToPort": 80,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "LoadBalancerSecurityGrouptoSupabaseKongServiceSecurityGroupB3C4AC8F800011C84C57": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongServiceSecurityGroupE199EE6C",
            "GroupId",
          ],
        },
        "FromPort": 8000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "LoadBalancerSecurityGroupA28D6DD7",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 8000,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "LoadBalancerSecurityGrouptoSupabaseKongServiceSecurityGroupB3C4AC8F8100711401B1": Object {
      "Properties": Object {
        "Description": "ALB healthcheck",
        "DestinationSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongServiceSecurityGroupE199EE6C",
            "GroupId",
          ],
        },
        "FromPort": 8100,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "LoadBalancerSecurityGroupA28D6DD7",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 8100,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "MetaLogs80FD71C7": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "MetaService2BE3A4CF": Object {
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
        "MetaTaskDefTaskRoleC662B431",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "Alarms": Object {
            "AlarmNames": Array [],
            "Enable": false,
            "Rollback": false,
          },
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "DesiredCount": Object {
          "Fn::If": Array [
            "MetaServiceEnabled094DCF06",
            Object {
              "Ref": "AWS::NoValue",
            },
            0,
          ],
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "MetaServiceSecurityGroup0E39DF35",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 8080,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "MetaServiceCloudmapService638956CC",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "MetaTaskDef2C490DD3",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "MetaServiceCloudmapService638956CC": Object {
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
        "MetaTaskDefTaskRoleC662B431",
      ],
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "meta",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "MetaServiceSecurityGroup0E39DF35": Object {
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
        "MetaTaskDefTaskRoleC662B431",
      ],
      "Properties": Object {
        "GroupDescription": "Supabase/Meta/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "MetaServiceSecurityGroupfromSupabaseKongServiceSecurityGroupB3C4AC8F80805AD2C559": Object {
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
        "MetaTaskDefTaskRoleC662B431",
      ],
      "Properties": Object {
        "Description": "from SupabaseKongServiceSecurityGroupB3C4AC8F:8080",
        "FromPort": 8080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "MetaServiceSecurityGroup0E39DF35",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongServiceSecurityGroupE199EE6C",
            "GroupId",
          ],
        },
        "ToPort": 8080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "MetaServiceTaskCountTarget124C5BFA": Object {
      "Condition": "MetaAutoScalingEnabledCF28EDB1",
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
        "MetaTaskDefTaskRoleC662B431",
      ],
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 2,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "MetaService2BE3A4CF",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "MetaServiceTaskCountTargetScaleOnCpuBFDCF132": Object {
      "Condition": "MetaAutoScalingEnabledCF28EDB1",
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
        "MetaTaskDefTaskRoleC662B431",
      ],
      "Properties": Object {
        "PolicyName": "SupabaseMetaServiceTaskCountTargetScaleOnCpuB433E25D",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "MetaServiceTaskCountTarget124C5BFA",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "MetaTaskDef2C490DD3": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "PG_META_PORT",
                "Value": "8080",
              },
              Object {
                "Name": "PG_META_DB_HOST",
                "Value": Object {
                  "Fn::GetAtt": Array [
                    "DatabaseCluster5B53A178",
                    "Endpoint.Address",
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_PORT",
                "Value": Object {
                  "Fn::GetAtt": Array [
                    "DatabaseCluster5B53A178",
                    "Endpoint.Port",
                  ],
                },
              },
            ],
            "Essential": true,
            "Image": Object {
              "Ref": "PostgresMetaImageUri",
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "MetaLogs80FD71C7",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8080,
                "Name": "http",
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "PG_META_DB_NAME",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseClusterSecretAttachmentDC8466C0",
                      },
                      ":dbname::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseClusterSecretAttachmentDC8466C0",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseClusterSecretAttachmentDC8466C0",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": Object {
          "Fn::FindInMap": Array [
            "TaskSize",
            Object {
              "Ref": "MetaTaskSize556D36D9",
            },
            "cpu",
          ],
        },
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "MetaTaskDefExecutionRole959286B6",
            "Arn",
          ],
        },
        "Family": "SupabaseMetaTaskDef48FB78F0",
        "Memory": Object {
          "Fn::FindInMap": Array [
            "TaskSize",
            Object {
              "Ref": "MetaTaskSize556D36D9",
            },
            "memory",
          ],
        },
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "MetaTaskDefTaskRoleC662B431",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "MetaTaskDefExecutionRole959286B6": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "MetaTaskDefExecutionRoleDefaultPolicy60F100A8": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "MetaLogs80FD71C7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseClusterSecretAttachmentDC8466C0",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MetaTaskDefExecutionRoleDefaultPolicy60F100A8",
        "Roles": Array [
          Object {
            "Ref": "MetaTaskDefExecutionRole959286B6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MetaTaskDefTaskRoleC662B431": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RealtimeLogs5C43159D": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "RealtimeServiceA39AF596": Object {
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
        "RealtimeTaskDefTaskRole3682E469",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "Alarms": Object {
            "AlarmNames": Array [],
            "Enable": false,
            "Rollback": false,
          },
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "DesiredCount": Object {
          "Fn::If": Array [
            "RealtimeServiceEnabled18ED891C",
            Object {
              "Ref": "AWS::NoValue",
            },
            0,
          ],
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "RealtimeServiceSecurityGroup8E245E7E",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 4000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "RealtimeServiceCloudmapServiceBBBA4A23",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "RealtimeTaskDef9E0DD838",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "RealtimeServiceCloudmapServiceBBBA4A23": Object {
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
        "RealtimeTaskDefTaskRole3682E469",
      ],
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "realtime-dev",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "RealtimeServiceSecurityGroup8E245E7E": Object {
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
        "RealtimeTaskDefTaskRole3682E469",
      ],
      "Properties": Object {
        "GroupDescription": "Supabase/Realtime/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RealtimeServiceSecurityGroupfromSupabaseKongServiceSecurityGroupB3C4AC8F40007D995F01": Object {
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
        "RealtimeTaskDefTaskRole3682E469",
      ],
      "Properties": Object {
        "Description": "from SupabaseKongServiceSecurityGroupB3C4AC8F:4000",
        "FromPort": 4000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RealtimeServiceSecurityGroup8E245E7E",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongServiceSecurityGroupE199EE6C",
            "GroupId",
          ],
        },
        "ToPort": 4000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RealtimeServiceSecurityGroupfromSupabaseRealtimeServiceSecurityGroup570992FEALLTRAFFIC599B2469": Object {
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
        "RealtimeTaskDefTaskRole3682E469",
      ],
      "Properties": Object {
        "Description": "from SupabaseRealtimeServiceSecurityGroup570992FE:ALL TRAFFIC",
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RealtimeServiceSecurityGroup8E245E7E",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "RealtimeServiceSecurityGroup8E245E7E",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RealtimeServiceTaskCountTarget89349CD4": Object {
      "Condition": "RealtimeAutoScalingEnabled7991ED3B",
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
        "RealtimeTaskDefTaskRole3682E469",
      ],
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 2,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "RealtimeServiceA39AF596",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "RealtimeServiceTaskCountTargetScaleOnCpu764115FF": Object {
      "Condition": "RealtimeAutoScalingEnabled7991ED3B",
      "DependsOn": Array [
        "DatabaseMigration993F5B9C",
        "RealtimeTaskDefTaskRole3682E469",
      ],
      "Properties": Object {
        "PolicyName": "SupabaseRealtimeServiceTaskCountTargetScaleOnCpu2482C1E2",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "RealtimeServiceTaskCountTarget89349CD4",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "RealtimeTaskDef9E0DD838": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Command": Array [
              "sh",
              "-c",
              "/app/bin/migrate && /app/bin/realtime eval \\"Realtime.Release.seeds(Realtime.Repo)\\" && /app/bin/server",
            ],
            "EntryPoint": Array [
              "/usr/bin/tini",
              "-s",
              "-g",
              "--",
            ],
            "Environment": Array [
              Object {
                "Name": "PORT",
                "Value": "4000",
              },
              Object {
                "Name": "DB_HOST",
                "Value": Object {
                  "Fn::GetAtt": Array [
                    "DatabaseCluster5B53A178",
                    "Endpoint.Address",
                  ],
                },
              },
              Object {
                "Name": "DB_PORT",
                "Value": Object {
                  "Fn::GetAtt": Array [
                    "DatabaseCluster5B53A178",
                    "Endpoint.Port",
                  ],
                },
              },
              Object {
                "Name": "DB_AFTER_CONNECT_QUERY",
                "Value": "SET search_path TO realtime",
              },
              Object {
                "Name": "DB_ENC_KEY",
                "Value": "supabaserealtime",
              },
              Object {
                "Name": "FLY_ALLOC_ID",
                "Value": "fly123",
              },
              Object {
                "Name": "FLY_APP_NAME",
                "Value": "realtime",
              },
              Object {
                "Name": "ERL_AFLAGS",
                "Value": "-proto_dist inet_tcp",
              },
              Object {
                "Name": "ENABLE_TAILSCALE",
                "Value": "false",
              },
              Object {
                "Name": "DNS_NODES",
                "Value": "realtime-dev.supabase.internal",
              },
            ],
            "Essential": true,
            "Image": Object {
              "Ref": "RealtimeImageUri",
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RealtimeLogs5C43159D",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 4000,
                "Name": "http",
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "DB_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseClusterSecretAttachmentDC8466C0",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseClusterSecretAttachmentDC8466C0",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_NAME",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseClusterSecretAttachmentDC8466C0",
                      },
                      ":dbname::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "API_JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "JwtSecretB8834B39",
                },
              },
              Object {
                "Name": "SECRET_KEY_BASE",
                "ValueFrom": Object {
                  "Ref": "CookieSigningSecretE5797145",
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": Object {
          "Fn::FindInMap": Array [
            "TaskSize",
            Object {
              "Ref": "RealtimeTaskSize6077FE1F",
            },
            "cpu",
          ],
        },
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "RealtimeTaskDefExecutionRole578AA7F5",
            "Arn",
          ],
        },
        "Family": "SupabaseRealtimeTaskDef0EF41020",
        "Memory": Object {
          "Fn::FindInMap": Array [
            "TaskSize",
            Object {
              "Ref": "RealtimeTaskSize6077FE1F",
            },
            "memory",
          ],
        },
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "RealtimeTaskDefTaskRole3682E469",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "RealtimeTaskDefExecutionRole578AA7F5": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RealtimeTaskDefExecutionRoleDefaultPolicyD46A3DCC": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "RealtimeLogs5C43159D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseClusterSecretAttachmentDC8466C0",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "JwtSecretB8834B39",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "CookieSigningSecretE5797145",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RealtimeTaskDefExecutionRoleDefaultPolicyD46A3DCC",
        "Roles": Array [
          Object {
            "Ref": "RealtimeTaskDefExecutionRole578AA7F5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RealtimeTaskDefTaskRole3682E469": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RestLogsE8B49088": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "RestService8812C0B2": Object {
      "DependsOn": Array [
        "RestTaskDefTaskRole59E8D431",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "Alarms": Object {
            "AlarmNames": Array [],
            "Enable": false,
            "Rollback": false,
          },
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "DesiredCount": Object {
          "Fn::If": Array [
            "RestServiceEnabledD6F99FCE",
            Object {
              "Ref": "AWS::NoValue",
            },
            0,
          ],
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "RestServiceSecurityGroup0BAEA949",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 3000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "RestServiceCloudmapServiceA978698C",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "RestTaskDef716BD951",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "RestServiceCloudmapServiceA978698C": Object {
      "DependsOn": Array [
        "RestTaskDefTaskRole59E8D431",
      ],
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "rest",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "RestServiceSecurityGroup0BAEA949": Object {
      "DependsOn": Array [
        "RestTaskDefTaskRole59E8D431",
      ],
      "Properties": Object {
        "GroupDescription": "Supabase/Rest/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RestServiceSecurityGroupfromSupabaseAuthServiceSecurityGroupC0652D2330004E9DE7F5": Object {
      "DependsOn": Array [
        "RestTaskDefTaskRole59E8D431",
      ],
      "Properties": Object {
        "Description": "from SupabaseAuthServiceSecurityGroupC0652D23:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestServiceSecurityGroup0BAEA949",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "AuthServiceSecurityGroup6440464F",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestServiceSecurityGroupfromSupabaseKongServiceSecurityGroupB3C4AC8F300032126E75": Object {
      "DependsOn": Array [
        "RestTaskDefTaskRole59E8D431",
      ],
      "Properties": Object {
        "Description": "from SupabaseKongServiceSecurityGroupB3C4AC8F:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestServiceSecurityGroup0BAEA949",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongServiceSecurityGroupE199EE6C",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestServiceSecurityGroupfromSupabaseStorageServiceSecurityGroupADF822D430009563CF9C": Object {
      "DependsOn": Array [
        "RestTaskDefTaskRole59E8D431",
      ],
      "Properties": Object {
        "Description": "from SupabaseStorageServiceSecurityGroupADF822D4:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestServiceSecurityGroup0BAEA949",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StorageServiceSecurityGroupF6280DC0",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestServiceTaskCountTarget8C6E8E1E": Object {
      "Condition": "RestAutoScalingEnabled69452861",
      "DependsOn": Array [
        "RestTaskDefTaskRole59E8D431",
      ],
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 2,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "RestService8812C0B2",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "RestServiceTaskCountTargetScaleOnCpuE9845870": Object {
      "Condition": "RestAutoScalingEnabled69452861",
      "DependsOn": Array [
        "RestTaskDefTaskRole59E8D431",
      ],
      "Properties": Object {
        "PolicyName": "SupabaseRestServiceTaskCountTargetScaleOnCpuB529B263",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "RestServiceTaskCountTarget8C6E8E1E",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "RestTaskDef716BD951": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "PGRST_DB_SCHEMAS",
                "Value": "public,storage,graphql_public",
              },
              Object {
                "Name": "PGRST_DB_ANON_ROLE",
                "Value": "anon",
              },
              Object {
                "Name": "PGRST_DB_USE_LEGACY_GUCS",
                "Value": "false",
              },
              Object {
                "Name": "PGRST_APP_SETTINGS_JWT_EXP",
                "Value": Object {
                  "Ref": "JwtExpiryLimit",
                },
              },
            ],
            "Essential": true,
            "Image": Object {
              "Ref": "RestImageUri",
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RestLogsE8B49088",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 3000,
                "Name": "http",
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "PGRST_DB_URI",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseauthenticatorSecret69FA14DE",
                      },
                      ":uri::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PGRST_JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "JwtSecretB8834B39",
                },
              },
              Object {
                "Name": "PGRST_APP_SETTINGS_JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "JwtSecretB8834B39",
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": Object {
          "Fn::FindInMap": Array [
            "TaskSize",
            Object {
              "Ref": "RestTaskSize14E11A14",
            },
            "cpu",
          ],
        },
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "RestTaskDefExecutionRole8E4C9F62",
            "Arn",
          ],
        },
        "Family": "SupabaseRestTaskDef0C1A5ADE",
        "Memory": Object {
          "Fn::FindInMap": Array [
            "TaskSize",
            Object {
              "Ref": "RestTaskSize14E11A14",
            },
            "memory",
          ],
        },
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "RestTaskDefTaskRole59E8D431",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "RestTaskDefExecutionRole8E4C9F62": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RestTaskDefExecutionRoleDefaultPolicy2E2B5505": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "RestLogsE8B49088",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseauthenticatorSecret69FA14DE",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "JwtSecretB8834B39",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RestTaskDefExecutionRoleDefaultPolicy2E2B5505",
        "Roles": Array [
          Object {
            "Ref": "RestTaskDefExecutionRole8E4C9F62",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RestTaskDefTaskRole59E8D431": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "SmtpAccessKeyCCAD8B7D": Object {
      "Properties": Object {
        "UserName": Object {
          "Ref": "SmtpUser4973DF55",
        },
      },
      "Type": "AWS::IAM::AccessKey",
    },
    "SmtpPasswordBA01E518": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Region": Object {
          "Ref": "SesRegion",
        },
        "SecretAccessKey": Object {
          "Fn::GetAtt": Array [
            "SmtpAccessKeyCCAD8B7D",
            "SecretAccessKey",
          ],
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SmtpPasswordProviderframeworkonEvent430EB845",
            "Arn",
          ],
        },
      },
      "Type": "Custom::Password",
      "UpdateReplacePolicy": "Delete",
    },
    "SmtpPasswordFunctionDC49B7CC": Object {
      "DependsOn": Array [
        "SmtpPasswordFunctionServiceRoleA0A9C3A3",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "cbb9c0c24fa0ee781b61f07de9aab9f7fbd9d5fec8eed79f7c53870781adaf38.zip",
        },
        "Description": "Supabase - Generate SMTP Password Function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SmtpPasswordFunctionServiceRoleA0A9C3A3",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "SmtpPasswordFunctionServiceRoleA0A9C3A3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SmtpPasswordProviderframeworkonEvent430EB845": Object {
      "DependsOn": Array [
        "SmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicyD17BD380",
        "SmtpPasswordProviderframeworkonEventServiceRoleF0717454",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase/Smtp/PasswordProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SmtpPasswordFunctionDC49B7CC",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SmtpPasswordProviderframeworkonEventServiceRoleF0717454",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicyD17BD380": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SmtpPasswordFunctionDC49B7CC",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SmtpPasswordFunctionDC49B7CC",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicyD17BD380",
        "Roles": Array [
          Object {
            "Ref": "SmtpPasswordProviderframeworkonEventServiceRoleF0717454",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SmtpPasswordProviderframeworkonEventServiceRoleF0717454": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SmtpSecretF89CC16B": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": "Supabase - SMTP Secret",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "SmtpSecret",
            ],
          ],
        },
        "SecretString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"username\\":\\"",
              Object {
                "Fn::If": Array [
                  "WorkMailEnabled",
                  Object {
                    "Fn::GetAtt": Array [
                      "SmtpWorkMailNestedStackWorkMailNestedStackResource042ECB25",
                      "Outputs.SupabaseSmtpWorkMailOrganizationSupabaseBD859A4AEmail",
                    ],
                  },
                  Object {
                    "Ref": "SmtpAccessKeyCCAD8B7D",
                  },
                ],
              },
              "\\",\\"password\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "SmtpPasswordBA01E518",
                  "Password",
                ],
              },
              "\\",\\"host\\":\\"",
              Object {
                "Fn::If": Array [
                  "WorkMailEnabled",
                  Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "smtp.mail.",
                        Object {
                          "Ref": "SesRegion",
                        },
                        ".awsapps.com",
                      ],
                    ],
                  },
                  Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "email-smtp.",
                        Object {
                          "Ref": "SesRegion",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                ],
              },
              "\\"}",
            ],
          ],
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "SmtpSendEmailPolicyCCA0AA9B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ses:SendRawEmail",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SmtpSendEmailPolicyCCA0AA9B",
        "Users": Array [
          Object {
            "Ref": "SmtpUser4973DF55",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SmtpUser4973DF55": Object {
      "Type": "AWS::IAM::User",
    },
    "SmtpWorkMailNestedStackWorkMailNestedStackResource042ECB25": Object {
      "Condition": "WorkMailEnabled",
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Parameters": Object {
          "referencetoSupabaseSesRegion184A3193Ref": Object {
            "Ref": "SesRegion",
          },
          "referencetoSupabaseSmtpPassword76B56B34Password": Object {
            "Fn::GetAtt": Array [
              "SmtpPasswordBA01E518",
              "Password",
            ],
          },
        },
        "TemplateURL": Object {
          "Fn::Join": Array [
            "",
            Array [
              "https://s3.",
              Object {
                "Ref": "AWS::Region",
              },
              ".",
              Object {
                "Ref": "AWS::URLSuffix",
              },
              "/",
              Object {
                "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
              },
              "/7aabbee555398e67993d5375d55c680f9149283289ee61f2f6c3e17ebc2f05a9.json",
            ],
          ],
        },
      },
      "Type": "AWS::CloudFormation::Stack",
      "UpdateReplacePolicy": "Delete",
    },
    "StorageLogs2A2D4D26": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "StorageService1CFF47FC": Object {
      "DependsOn": Array [
        "StorageTaskDefTaskRoleDefaultPolicy0587C2F8",
        "StorageTaskDefTaskRoleFB709706",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "Alarms": Object {
            "AlarmNames": Array [],
            "Enable": false,
            "Rollback": false,
          },
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "DesiredCount": Object {
          "Fn::If": Array [
            "StorageServiceEnabled58819374",
            Object {
              "Ref": "AWS::NoValue",
            },
            0,
          ],
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "StorageServiceSecurityGroupF6280DC0",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 5000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "StorageServiceCloudmapService524EC31C",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "StorageTaskDef36011FFA",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "StorageServiceCloudmapService524EC31C": Object {
      "DependsOn": Array [
        "StorageTaskDefTaskRoleDefaultPolicy0587C2F8",
        "StorageTaskDefTaskRoleFB709706",
      ],
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "storage",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "StorageServiceSecurityGroupF6280DC0": Object {
      "DependsOn": Array [
        "StorageTaskDefTaskRoleDefaultPolicy0587C2F8",
        "StorageTaskDefTaskRoleFB709706",
      ],
      "Properties": Object {
        "GroupDescription": "Supabase/Storage/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "StorageServiceSecurityGroupfromSupabaseKongServiceSecurityGroupB3C4AC8F50000996D63B": Object {
      "DependsOn": Array [
        "StorageTaskDefTaskRoleDefaultPolicy0587C2F8",
        "StorageTaskDefTaskRoleFB709706",
      ],
      "Properties": Object {
        "Description": "from SupabaseKongServiceSecurityGroupB3C4AC8F:5000",
        "FromPort": 5000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "StorageServiceSecurityGroupF6280DC0",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongServiceSecurityGroupE199EE6C",
            "GroupId",
          ],
        },
        "ToPort": 5000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "StorageServiceTaskCountTargetAF72160A": Object {
      "Condition": "StorageAutoScalingEnabled4D34646B",
      "DependsOn": Array [
        "StorageTaskDefTaskRoleDefaultPolicy0587C2F8",
        "StorageTaskDefTaskRoleFB709706",
      ],
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 2,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "StorageService1CFF47FC",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "StorageServiceTaskCountTargetScaleOnCpuDB3B903C": Object {
      "Condition": "StorageAutoScalingEnabled4D34646B",
      "DependsOn": Array [
        "StorageTaskDefTaskRoleDefaultPolicy0587C2F8",
        "StorageTaskDefTaskRoleFB709706",
      ],
      "Properties": Object {
        "PolicyName": "SupabaseStorageServiceTaskCountTargetScaleOnCpuE2C72C87",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "StorageServiceTaskCountTargetAF72160A",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "StorageTaskDef36011FFA": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "POSTGREST_URL",
                "Value": "http://rest.supabase.internal:3000",
              },
              Object {
                "Name": "PGOPTIONS",
                "Value": "-c search_path=storage,public",
              },
              Object {
                "Name": "FILE_SIZE_LIMIT",
                "Value": "52428800",
              },
              Object {
                "Name": "STORAGE_BACKEND",
                "Value": "s3",
              },
              Object {
                "Name": "TENANT_ID",
                "Value": "stub",
              },
              Object {
                "Name": "IS_MULTITENANT",
                "Value": "false",
              },
              Object {
                "Name": "REGION",
                "Value": Object {
                  "Ref": "AWS::Region",
                },
              },
              Object {
                "Name": "GLOBAL_S3_BUCKET",
                "Value": Object {
                  "Ref": "Bucket83908E77",
                },
              },
              Object {
                "Name": "ENABLE_IMAGE_TRANSFORMATION",
                "Value": "true",
              },
              Object {
                "Name": "IMGPROXY_URL",
                "Value": "http://imgproxy.supabase.internal:5001",
              },
              Object {
                "Name": "WEBHOOK_URL",
                "Value": Object {
                  "Fn::GetAtt": Array [
                    "CdnCacheManagerApiFunctionFunctionUrl37928FC6",
                    "FunctionUrl",
                  ],
                },
              },
              Object {
                "Name": "ENABLE_QUEUE_EVENTS",
                "Value": "false",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "wget",
                "--no-verbose",
                "--tries=1",
                "--spider",
                "http://localhost:5000/status",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": Object {
              "Ref": "StorageImageUri",
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StorageLogs2A2D4D26",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 5000,
                "Name": "http",
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "ANON_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "JwtSecretAnonKeyParameter532DCC06",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SERVICE_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "JwtSecretServiceRoleKeyParameterB65536EB",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "PGRST_JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "JwtSecretB8834B39",
                },
              },
              Object {
                "Name": "DATABASE_URL",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabasesupabasestorageadminSecret88C76AA3",
                      },
                      ":uri::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "WEBHOOK_API_KEY",
                "ValueFrom": Object {
                  "Ref": "CdnCacheManagerApiKey137D2795",
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": Object {
          "Fn::FindInMap": Array [
            "TaskSize",
            Object {
              "Ref": "StorageTaskSizeB82D9CFB",
            },
            "cpu",
          ],
        },
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "StorageTaskDefExecutionRoleA2EF27E4",
            "Arn",
          ],
        },
        "Family": "SupabaseStorageTaskDef9FD687B2",
        "Memory": Object {
          "Fn::FindInMap": Array [
            "TaskSize",
            Object {
              "Ref": "StorageTaskSizeB82D9CFB",
            },
            "memory",
          ],
        },
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "StorageTaskDefTaskRoleFB709706",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "StorageTaskDefExecutionRoleA2EF27E4": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageTaskDefExecutionRoleDefaultPolicyCFBB4B95": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StorageLogs2A2D4D26",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "JwtSecretAnonKeyParameter532DCC06",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "JwtSecretServiceRoleKeyParameterB65536EB",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "JwtSecretB8834B39",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabasesupabasestorageadminSecret88C76AA3",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "CdnCacheManagerApiKey137D2795",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StorageTaskDefExecutionRoleDefaultPolicyCFBB4B95",
        "Roles": Array [
          Object {
            "Ref": "StorageTaskDefExecutionRoleA2EF27E4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StorageTaskDefTaskRoleDefaultPolicy0587C2F8": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StorageTaskDefTaskRoleDefaultPolicy0587C2F8",
        "Roles": Array [
          Object {
            "Ref": "StorageTaskDefTaskRoleFB709706",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StorageTaskDefTaskRoleFB709706": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioAmplifySSRLoggingPolicyB3151918": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/aws/amplify/",
                    Object {
                      "Fn::GetAtt": Array [
                        "StudioAppE10A3450",
                        "AppId",
                      ],
                    },
                    ":log-stream:*",
                  ],
                ],
              },
              "Sid": "PushLogs",
            },
            Object {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/aws/amplify/*",
                  ],
                ],
              },
              "Sid": "CreateLogGroup",
            },
            Object {
              "Action": "logs:DescribeLogGroups",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:*",
                  ],
                ],
              },
              "Sid": "DescribeLogGroups",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "AmplifySSRLoggingPolicy-",
              Object {
                "Fn::GetAtt": Array [
                  "StudioAppE10A3450",
                  "AppId",
                ],
              },
            ],
          ],
        },
        "Roles": Array [
          Object {
            "Ref": "StudioRole199EAF11",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StudioAppE10A3450": Object {
      "Properties": Object {
        "BasicAuthConfig": Object {
          "EnableBasicAuth": false,
        },
        "BuildSpec": Object {
          "Fn::Join": Array [
            "",
            Array [
              "version: 1
applications:
  - appRoot: studio
    frontend:
      phases:
        preBuild:
          commands:
            - echo POSTGRES_PASSWORD=$(aws secretsmanager get-secret-value --secret-id $DB_SECRET_ARN --query SecretString | jq -r . | jq -r .password) >> .env.production
            - echo SUPABASE_ANON_KEY=$(aws ssm get-parameter --region $SUPABASE_REGION --name $ANON_KEY_NAME --query Parameter.Value) >> .env.production
            - echo SUPABASE_SERVICE_KEY=$(aws ssm get-parameter --region $SUPABASE_REGION --name $SERVICE_KEY_NAME --query Parameter.Value) >> .env.production
            - env | grep -e STUDIO_PG_META_URL >> .env.production
            - env | grep -e SUPABASE_ >> .env.production
            - env | grep -e NEXT_PUBLIC_ >> .env.production
            - cd ../
            - npx turbo@1.10.3 prune --scope=studio
            - npm clean-install
        build:
          commands:
            - npx turbo run build --scope=studio --include-dependencies --no-deps
            - npm prune --omit=dev
        postBuild:
          commands:
            - cd studio
            - rsync -av --ignore-existing .next/standalone/",
              Object {
                "Fn::GetAtt": Array [
                  "StudioRepositoryE0EFFBE2",
                  "Name",
                ],
              },
              "/studio/ .next/standalone/
            - rsync -av --ignore-existing .next/standalone/",
              Object {
                "Fn::GetAtt": Array [
                  "StudioRepositoryE0EFFBE2",
                  "Name",
                ],
              },
              "/node_modules/ .next/standalone/node_modules/
            - rm -rf .next/standalone/",
              Object {
                "Fn::GetAtt": Array [
                  "StudioRepositoryE0EFFBE2",
                  "Name",
                ],
              },
              "
            - cp .env .env.production .next/standalone/
            - rsync -av --ignore-existing public/ .next/standalone/public/
            - rsync -av --ignore-existing .next/static/ .next/standalone/.next/static/
      artifacts:
        baseDirectory: .next
        files:
          - \\"**/*\\"
      cache:
        paths:
          - node_modules/**/*
",
            ],
          ],
        },
        "CustomRules": Array [
          Object {
            "Source": "/<*>",
            "Status": "404-200",
            "Target": "/index.html",
          },
        ],
        "EnvironmentVariables": Array [
          Object {
            "Name": "NODE_OPTIONS",
            "Value": "--max-old-space-size=4096",
          },
          Object {
            "Name": "AMPLIFY_MONOREPO_APP_ROOT",
            "Value": "studio",
          },
          Object {
            "Name": "AMPLIFY_DIFF_DEPLOY",
            "Value": "false",
          },
          Object {
            "Name": "_CUSTOM_IMAGE",
            "Value": "public.ecr.aws/sam/build-nodejs18.x:latest",
          },
          Object {
            "Name": "STUDIO_PG_META_URL",
            "Value": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "https://",
                  Object {
                    "Fn::GetAtt": Array [
                      "CdnDistribution149FA6C8",
                      "DomainName",
                    ],
                  },
                  "/pg",
                ],
              ],
            },
          },
          Object {
            "Name": "SUPABASE_URL",
            "Value": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "https://",
                  Object {
                    "Fn::GetAtt": Array [
                      "CdnDistribution149FA6C8",
                      "DomainName",
                    ],
                  },
                ],
              ],
            },
          },
          Object {
            "Name": "SUPABASE_PUBLIC_URL",
            "Value": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "https://",
                  Object {
                    "Fn::GetAtt": Array [
                      "CdnDistribution149FA6C8",
                      "DomainName",
                    ],
                  },
                ],
              ],
            },
          },
          Object {
            "Name": "SUPABASE_REGION",
            "Value": Object {
              "Ref": "AWS::Region",
            },
          },
          Object {
            "Name": "DB_SECRET_ARN",
            "Value": Object {
              "Ref": "DatabasedashboarduserSecret102D2F3B",
            },
          },
          Object {
            "Name": "ANON_KEY_NAME",
            "Value": Object {
              "Ref": "JwtSecretAnonKeyParameter532DCC06",
            },
          },
          Object {
            "Name": "SERVICE_KEY_NAME",
            "Value": Object {
              "Ref": "JwtSecretServiceRoleKeyParameterB65536EB",
            },
          },
        ],
        "IAMServiceRole": Object {
          "Fn::GetAtt": Array [
            "StudioRole199EAF11",
            "Arn",
          ],
        },
        "Name": "SupabaseStudio",
        "Platform": "WEB_COMPUTE",
        "Repository": Object {
          "Fn::GetAtt": Array [
            "StudioRepositoryE0EFFBE2",
            "CloneUrlHttp",
          ],
        },
      },
      "Type": "AWS::Amplify::App",
    },
    "StudioAppProdBranchED7568CB": Object {
      "Properties": Object {
        "AppId": Object {
          "Fn::GetAtt": Array [
            "StudioAppE10A3450",
            "AppId",
          ],
        },
        "BranchName": "main",
        "EnableAutoBuild": true,
        "EnablePullRequestPreview": true,
        "EnvironmentVariables": Array [
          Object {
            "Name": "NEXT_PUBLIC_SITE_URL",
            "Value": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "https://main.",
                  Object {
                    "Fn::GetAtt": Array [
                      "StudioAppE10A3450",
                      "AppId",
                    ],
                  },
                  ".amplifyapp.com",
                ],
              ],
            },
          },
        ],
        "Framework": "Next.js - SSR",
        "Stage": "PRODUCTION",
      },
      "Type": "AWS::Amplify::Branch",
    },
    "StudioRepositoryE0EFFBE2": Object {
      "Properties": Object {
        "RepositoryDescription": "Supabase/Studio/Repository",
        "RepositoryName": Object {
          "Ref": "AWS::StackName",
        },
      },
      "Type": "AWS::CodeCommit::Repository",
    },
    "StudioRepositoryImportFunctionF87C7D62": Object {
      "DependsOn": Array [
        "StudioRepositoryImportFunctionServiceRoleDefaultPolicyA3265637",
        "StudioRepositoryImportFunctionServiceRoleC6B8ED58",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "5c51be0641b6947a546a4837d3a851cf3e3b67f9b8a02fa6770621de03a50c45.zip",
        },
        "Description": "Clone to CodeCommit from remote repo (You can execute this function manually.)",
        "Environment": Object {
          "Variables": Object {
            "SOURCE_BRANCH": Object {
              "Ref": "StudioBranch",
            },
            "SOURCE_REPO": "https://github.com/supabase/supabase.git",
            "TARGET_BRANCH": "main",
            "TARGET_REPO": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "codecommit::",
                  Object {
                    "Ref": "AWS::Region",
                  },
                  "://",
                  Object {
                    "Fn::GetAtt": Array [
                      "StudioRepositoryE0EFFBE2",
                      "Name",
                    ],
                  },
                ],
              ],
            },
          },
        },
        "EphemeralStorage": Object {
          "Size": 3072,
        },
        "Handler": "index.handler",
        "MemorySize": 2048,
        "Role": Object {
          "Fn::GetAtt": Array [
            "StudioRepositoryImportFunctionServiceRoleC6B8ED58",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "StudioRepositoryImportFunctionServiceRoleC6B8ED58": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioRepositoryImportFunctionServiceRoleDefaultPolicyA3265637": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "codecommit:GitPull",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StudioRepositoryE0EFFBE2",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "codecommit:GitPush",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StudioRepositoryE0EFFBE2",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StudioRepositoryImportFunctionServiceRoleDefaultPolicyA3265637",
        "Roles": Array [
          Object {
            "Ref": "StudioRepositoryImportFunctionServiceRoleC6B8ED58",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StudioRepositoryImportProviderframeworkonEventFED45CDF": Object {
      "DependsOn": Array [
        "StudioRepositoryImportProviderframeworkonEventServiceRoleDefaultPolicy0FB1A847",
        "StudioRepositoryImportProviderframeworkonEventServiceRoleABEB03CC",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase/Studio/Repository/ImportProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "StudioRepositoryImportFunctionF87C7D62",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "StudioRepositoryImportProviderframeworkonEventServiceRoleABEB03CC",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "StudioRepositoryImportProviderframeworkonEventServiceRoleABEB03CC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioRepositoryImportProviderframeworkonEventServiceRoleDefaultPolicy0FB1A847": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "StudioRepositoryImportFunctionF87C7D62",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "StudioRepositoryImportFunctionF87C7D62",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StudioRepositoryImportProviderframeworkonEventServiceRoleDefaultPolicy0FB1A847",
        "Roles": Array [
          Object {
            "Ref": "StudioRepositoryImportProviderframeworkonEventServiceRoleABEB03CC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StudioRepositorymain62C45C74": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "StudioAppProdBranchED7568CB",
      ],
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "StudioRepositoryImportProviderframeworkonEventFED45CDF",
            "Arn",
          ],
        },
        "SourceBranch": Object {
          "Ref": "StudioBranch",
        },
        "SourceRepo": "https://github.com/supabase/supabase.git",
      },
      "Type": "Custom::RepoImportJob",
      "UpdateReplacePolicy": "Delete",
    },
    "StudioRole199EAF11": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "amplify.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "The service role that will be used by AWS Amplify for SSR app logging.",
        "Path": "/service-role/",
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioRoleDefaultPolicy289CEC37": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabasedashboarduserSecret102D2F3B",
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "JwtSecretAnonKeyParameter532DCC06",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "JwtSecretServiceRoleKeyParameterB65536EB",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "codecommit:GitPull",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StudioRepositoryE0EFFBE2",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StudioRoleDefaultPolicy289CEC37",
        "Roles": Array [
          Object {
            "Ref": "StudioRole199EAF11",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseDatabaseClusterSecret2AA4A5CD3fdaad7efa858a3daf9490cf0a702aeb": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              "Generated by the CDK for stack: ",
              Object {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": Object {
          "ExcludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@\\"\\\\",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{\\"username\\":\\"supabase_admin\\"}",
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-Database-supabase_admin",
            ],
          ],
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "VPCB9E5F0B4": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VPCIGWB7E252D3": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VPCPrivateSubnet1DefaultRouteAE1D6490": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VPCPublicSubnet1NATGatewayE0556630",
        },
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPrivateSubnet1RouteTableAssociation347902D1": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027",
        },
        "SubnetId": Object {
          "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPrivateSubnet1RouteTableBE8A6027": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase/VPC/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPrivateSubnet1Subnet8BCA10E0": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase/VPC/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPrivateSubnet2DefaultRouteF4F5CFD2": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VPCPublicSubnet1NATGatewayE0556630",
        },
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPrivateSubnet2RouteTable0A19E10E": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase/VPC/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPrivateSubnet2RouteTableAssociation0C73D413": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E",
        },
        "SubnetId": Object {
          "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPrivateSubnet2SubnetCFCDAA7A": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase/VPC/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPublicSubnet1DefaultRoute91CEF279": Object {
      "DependsOn": Array [
        "VPCVPCGW99B986DC",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPublicSubnet1EIP6AD938E8": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase/VPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VPCPublicSubnet1NATGatewayE0556630": Object {
      "DependsOn": Array [
        "VPCPublicSubnet1DefaultRoute91CEF279",
        "VPCPublicSubnet1RouteTableAssociation0B0896DC",
      ],
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "VPCPublicSubnet1EIP6AD938E8",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet1SubnetB4246D30",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase/VPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VPCPublicSubnet1RouteTableAssociation0B0896DC": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781",
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet1SubnetB4246D30",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPublicSubnet1RouteTableFEE4B781": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase/VPC/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPublicSubnet1SubnetB4246D30": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase/VPC/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPublicSubnet2DefaultRouteB7481BBA": Object {
      "DependsOn": Array [
        "VPCVPCGW99B986DC",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPublicSubnet2RouteTable6F1A15F1": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase/VPC/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPublicSubnet2RouteTableAssociation5A808732": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1",
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet2Subnet74179F39",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPublicSubnet2Subnet74179F39": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase/VPC/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCVPCGW99B986DC": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
  "Rules": Object {
    "AuthProvider1CheckClientIdD806CC33": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Equals": Array [
                  Object {
                    "Ref": "AuthProvider1ClientId5614D178",
                  },
                  "",
                ],
              },
            ],
          },
          "AssertDescription": "Provider1 Client Id is must not null, if Provider1 is enabled as external auth provider.",
        },
      ],
      "RuleCondition": Object {
        "Fn::Not": Array [
          Object {
            "Fn::Equals": Array [
              Object {
                "Ref": "AuthProvider1Name740DD3F6",
              },
              "",
            ],
          },
        ],
      },
    },
    "AuthProvider1CheckSecretB8DB1DF7": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Equals": Array [
                  Object {
                    "Ref": "AuthProvider1SecretAE54364F",
                  },
                  "",
                ],
              },
            ],
          },
          "AssertDescription": "Provider1 Client Secret is must not null, if Provider1 is enabled as external auth provider.",
        },
      ],
      "RuleCondition": Object {
        "Fn::Not": Array [
          Object {
            "Fn::Equals": Array [
              Object {
                "Ref": "AuthProvider1Name740DD3F6",
              },
              "",
            ],
          },
        ],
      },
    },
    "AuthProvider2CheckClientId828196E0": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Equals": Array [
                  Object {
                    "Ref": "AuthProvider2ClientIdF3685A2B",
                  },
                  "",
                ],
              },
            ],
          },
          "AssertDescription": "Provider2 Client Id is must not null, if Provider2 is enabled as external auth provider.",
        },
      ],
      "RuleCondition": Object {
        "Fn::Not": Array [
          Object {
            "Fn::Equals": Array [
              Object {
                "Ref": "AuthProvider2Name573986E5",
              },
              "",
            ],
          },
        ],
      },
    },
    "AuthProvider2CheckSecret00A859BE": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Equals": Array [
                  Object {
                    "Ref": "AuthProvider2Secret2662F55E",
                  },
                  "",
                ],
              },
            ],
          },
          "AssertDescription": "Provider2 Client Secret is must not null, if Provider2 is enabled as external auth provider.",
        },
      ],
      "RuleCondition": Object {
        "Fn::Not": Array [
          Object {
            "Fn::Equals": Array [
              Object {
                "Ref": "AuthProvider2Name573986E5",
              },
              "",
            ],
          },
        ],
      },
    },
    "AuthProvider3CheckClientIdF7467574": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Equals": Array [
                  Object {
                    "Ref": "AuthProvider3ClientId8DF3C6F7",
                  },
                  "",
                ],
              },
            ],
          },
          "AssertDescription": "Provider3 Client Id is must not null, if Provider3 is enabled as external auth provider.",
        },
      ],
      "RuleCondition": Object {
        "Fn::Not": Array [
          Object {
            "Fn::Equals": Array [
              Object {
                "Ref": "AuthProvider3NameA8A7785F",
              },
              "",
            ],
          },
        ],
      },
    },
    "AuthProvider3CheckSecret2A0B7A51": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Equals": Array [
                  Object {
                    "Ref": "AuthProvider3Secret29364F33",
                  },
                  "",
                ],
              },
            ],
          },
          "AssertDescription": "Provider3 Client Secret is must not null, if Provider3 is enabled as external auth provider.",
        },
      ],
      "RuleCondition": Object {
        "Fn::Not": Array [
          Object {
            "Fn::Equals": Array [
              Object {
                "Ref": "AuthProvider3NameA8A7785F",
              },
              "",
            ],
          },
        ],
      },
    },
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
    "CheckWorkMailRegion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Contains": Array [
              Array [
                "us-east-1",
                "us-west-2",
                "eu-west-1",
              ],
              Object {
                "Ref": "SesRegion",
              },
            ],
          },
          "AssertDescription": "Amazon WorkMail is supported only in us-east-1, us-west-2 or eu-west-1. Please change Amazon SES Region.",
        },
      ],
      "RuleCondition": Object {
        "Fn::Equals": Array [
          Object {
            "Ref": "EnableWorkMail",
          },
          "true",
        ],
      },
    },
  },
}
`;
